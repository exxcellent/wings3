<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"../support/docbook-dtd/docbookx.dtd">
<book lang="en">
  <title>wingS User Guide</title>

  <bookinfo>
    <date>June 29, 2007</date>

    <author>
      <surname>wingS Project Team</surname>
    </author>

    <subtitle>Writing and understanding wingS applications</subtitle>

    <copyright>
      <year>2005 - 2007</year>

      <holder>wingS Project Team</holder>
    </copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the <ulink
      url="http://www.gnu.org/licenses/licenses.html#FDL">GNU Free
      Documentation License</ulink>, Version 1.2 or any later version
      published by the Free Software Foundation; with no Invariant Sections,
      with no Front-Cover texts, and with no Back-Cover Texts. A copy of the
      license is included in the section entitled "<link linkend="gfdl">GNU
      Free Documentation License</link>" .</para>
    </legalnotice>
  </bookinfo>

  <preface>
    <title>Preface</title>

    <section>
      <title>Target Audience</title>

      <para>This document is intended to serve curious novices to wingS,
      developers using wingS, and developers willing to look into its
      internals. The further you progress in this document, the deeper you are
      getting to the core of wingS.</para>

      <para>Chapter 1 provides an introduction to the concepts of wingS.
      Chapter 2 takes you through a step-by-step tutorial on how to write a
      wingS application and make it fly. Once you decide to develop an
      application chapter 3 will lead you through the wingS toolset and
      mindset. Chapter 4 is an architectural orientation to aid in
      understanding how wingS works. It tries to fill in enough background
      information such that a newcomer will be able to quickly understand
      wingS source code and code examples, since there is plenty of demo code
      that you can look at.</para>

      <para>For management-oriented information please refer to the wingS
      whitepaper<footnote>
          <para><ulink
          url="http://wingsframework.org">wingS
          project website</ulink></para>
        </footnote>.</para>
    </section>

    <section>
      <title>Typographical Conventions</title>

      <para><code>session.Session</code> - a wingS class name (the org.wings
      part of the full name is elided, but subnames, as in this example are
      shown)</para>

      <para>"TODO" labels call out to you. Yes, you! Participate in the effort
      to build a first-class documentation, give something back!</para>
    </section>

    <section>
      <title>Credits</title>

      <para>Contributions to this documentation were provided by Holger Engels,
      Volker Fritzsch, Ian Gardner, Oliver Scheck and Benjamin Schmid.</para>
    </section>
  </preface>

  <chapter status="draft">
    <title>The Basics</title>

    <section>
      <title>The Swing in wingS</title>

      <para>The Java Foundation Classes (JFC) and its Swing API are known by
      nearly every Java developer. Its inherent MVC2 model is solid, yet
      flexible and fairly easy to learn. These reasons led to the idea to
      create an API with the Swing-feel, but generating and handling web
      applications. This idea is the underlying theme of wingS.</para>

      <para>So where is the Swing in wingS?</para>

      <section>
        <title>Widgets</title>

        <para>Suppose you want to display a table. Having Swing in mind, you'd
        implement an <code>AbstractTableModel</code> and associate it with a
        <code>JTable</code> instance which you placed in a JFrame. Now with
        wingS you do just the same, except you replace J's with S's. That's
        it! Apart from this prefix character of widget names the code is
        identical.</para>

        <para>For almost every <code>J&lt;xxx&gt;</code> component of Swing
        you find a <code>S&lt;xxx&gt;</code> counterpart in wingS with similar
        or identical behavior.</para>
      </section>

      <section>
        <title>MVC - Events and Listeners</title>

        <para>Furthermore, suppose you want to react on mouse clicks
        (selection events) in your table. Again, doing it the Swing way, you'd
        provide a <code>ListSelectionModel</code> implementation and register
        a <code>ListSelectionListener</code>. The exact same code will work in
        wingS, no difference to Swing.</para>

        <para>So wingS relies on the model, listener and event infrastructure
        of Swing, since there is no need to reinvent the wheel.</para>
      </section>
    </section>

    <section>
      <title>Web-related Concepts</title>

      <para>With the Swing feel of wingS, you sometimes forget you develop for
      a web application context. But there are concepts intrinsic to the web
      that wingS neither hides, nor intends to hide. Understanding these
      simple concepts helps you in creating successful projects.</para>

      <section>
        <title>Servlet API</title>

        <para>Despite all of wingS's magic, at the end of the day a wingS
        applications is nothing else but a servlet. Quite some servlet
        though.</para>

        <para>This means you will need a servlet container, such as Tomcat,
        Jetty, or JRun to execute wingS applications.</para>

        <para>During application development you typically don't notice the
        servlet environment your application will run in. In fact, it is only
        in the web.xml where you need to do anything servlet-related. Still it
        certainly helps to be aware of it's underlying servlet foundation, as
        you will see in succeeding chapters.</para>
      </section>

      <section>
        <title id="view-logic-separation">Separating View and Logic</title>

        <para>When developing web applications it proves very useful —if not
        necessary— to keep business logic separate from graphical
        representation. wingS provides simple, but empowering concepts for
        this separation:</para>

        <section>
          <title>Pluggable Look &amp; Feel <abbrev>(PLAF)</abbrev></title>

          <para>From the developers perspective wingS applications are built
          up using the provided set of Java widgets. Hence a layer is needed
          to transform the visual properties set on the widget components into
          the according HTML code. This is done by the so called Pluggable
          Look &amp; Feels <abbrev>(PLAF)</abbrev>. A PLAF is an exchangeable
          collection of widget renderers called <abbrev>CG</abbrev>s. Every CG
          is responsible for the rendering of one specific type of
          widget.</para>

          <para>This concept, combined with the fact that wingS ships with a
          very powerful default PLAF implementation, is a great step into the
          separation of view and logic, as the typical developer does not need
          to know any web specific details at all, but can fully rely on using
          the intuitive set of Swing-like wingS widgets.</para>
        </section>

        <section>
          <title>Layout managers</title>

          <para>Layout managers are responsible for arranging the widgets
          inside a container widget to a visual composite. These container
          widgets can be nested inside each other, each using its own layout
          manager, resulting in a containment hierarchy which will be
          reflected in the display. There are two classes of layout managers
          available, a static template layout manager and various dynamic
          layout managers.</para>

          <para>With the static <code>STemplate</code> layout manager you can
          create a XHTML template, which structurally and visually defines one
          component or the complete screen layout of your application. Then,
          put in <code>&lt;OBJECT&gt;</code> elements and give them a name,
          which will be referred to by your program code. These elements will
          be replaced with the real components at runtime. See <xref
          linkend="STemplateLayout" /> for how this is done.</para>

          <para>Besides this static approach you can also utilize different
          dynamic layout managers to arrange the widgets inside your
          application by pattern. Their usage is almost identical to that of
          the layout managers in Swing, and allows you to arrange your widgets
          in the usual patterns such as gridwise, floating or as a list. The
          browser-specific PLAF implementation then takes up the job to
          generate the optimized HTML code to achieve the desired layout.
          Please refer to <xref linkend="SwingLayoutManager" /> for more
          details.</para>
        </section>

        <section>
          <title>Styling</title>

          <para>The styling of single widgets or the application as a whole
          heavily relies on Cascading Style Sheets (<abbrev>CSS</abbrev>). It
          uses CSS to assign specific visual properties, statically to a whole
          class of a widgets, or dynamically to specific widget instances
          during runtime by transparently generating new CSS styles
          on-the-fly.</para>

          <para>But don't be afraid! In most cases you will not need to get in
          contact with these details at all, since wingS already ships with a
          decent default style which will provide a good start new eye-candy
          web applications while all the styling needed during runtime (i.e.
          colouring, specifying other fonts or assign spaces between widgets)
          can be achieved completely transparent using the Swing-like wingS
          API.</para>

          <para>The chapters <xref linkend="css-styles" /> and <xref
          linkend="css-concepts" /> will give you a deeper view on
          this.</para>
        </section>
      </section>
    </section>
  </chapter>

  <chapter status="draft">
    <title>The 3-Step Quick Start</title>

    <para>In real-life applications the process of starting a new wingS
    application will begin as simply as designing the main application layout.
    You will probably prefer to use a template to arrange and embed the main
    application components inside your desired screen design. As an example
    think of an application with a dynamic menu bar on the left side and a
    center work area, placed inside your typical corporate identity
    design.</para>

    <para>As the next step you will already be able to start designing and
    implementing the first functionality of your application. The default PLAF
    and CSS style sheets provided with the wingS distribution will already
    give you a decent start for a nice-looking and working web application,
    fulfilling most of the typical design needs.</para>

    <para>After designing the main application layout you have already passed
    the point where you will no longer need to have any in-depth knowledge of
    web-related technologies or concepts, in order to implement and design the
    further application logic. You can solely use and rely on the Swing-like
    Java API to create, use and arrange the finer grained application
    components. To dynamically style components, for example to emphasise a
    label with red color to indicate an error, is just as simple as a
    <code>label.setForeground(Color.RED);</code> call in your application
    code.</para>

    <para>Only if you need to style the look and feel of your application in
    detail will you extend or overwrite the default wingS CSS style sheets to
    adapt it to your individual styling needs. <xref linkend="css-styles" />
    will give you a deeper view into leveraging CSS to style your
    application.</para>

    <para>The following sections will demonstrate all the tasks needed to set
    up a simple "Hello World" example from scratch using the wingS framework.
    <note>
        <para>Please refer to the <filename>
        doc/tutorial/hellowings</filename> folder in the wingS distribution
        for the sources of this quickstart How-To.</para>
      </note></para>

    <section>
      <title id="hellowings">Get ready - Writing a wingS Frame</title>

      <para>First we need to set up your development environment. Just create
      a new directory <filename>helloworld</filename> and
      <filename>helloword/src</filename> and copy the contents of the two
      directories <filename>web</filename> and <filename>lib</filename> of
      the wingS distribution. Start your preferred IDE and create a new
      project using the directory you just generated. Include all the
      <filename>*.jar</filename>files in the copied <filename>lib</filename>
      and <filename> web/WEB-INF/lib</filename>directories in the classpath of
      your newly created project.</para>

      <para>Let's start writing our first wingS application. In general the
      starting point of a wingS application session is the constructor of a
      specific application root class. So all we need to do is to write a
      class which creates a wingS <code>SFrame</code> inside its constructor
      and adds some components to show before it calls
      <code>SFrame.setVisible(true)</code> to display the application.</para>

      <tip>
        <para>Most IDEs support quick JavaDoc and parameter name lookup if you
        attach the <filename>src/java directory</filename>of the wingS
        distribution as Java source and the <filename> dist/doc/api</filename>
        directory as JavaDoc source at the two main wingS libraries
        <filename>wings.jar</filename> and
        <filename>css.jar</filename>.</para>
      </tip>

      <para>We don't have any special layout desires, so we won't use a
      template layout file. For simplicity we'll just use one of the dynamic
      layout managers to arrange our components. So let's create a
      <filename>HelloWingS.java</filename> class in the
      <filename>src</filename> directory:</para>

      <programlisting>import org.wings.*;
import java.util.*;
import java.awt.event.*;

public class HelloWingS {
    public HelloWingS() {
        SGridLayout gridLayout = new SGridLayout(1);
        SForm panel = new SForm(gridLayout);
        SLabel titel = new SLabel("Hello World - this is wingS!");
        SButton okButton = new SButton("Guess!");
        titel.setFont(new SFont(null, SFont.BOLD, 18));
        gridLayout.setVgap(10);

        final SLabel message = new SLabel();
        final STextField textField = new STextField();
        final int randomNr = new Random().nextInt(10) + 1;

        // check our guesses and respond with according message
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (Integer.toString(randomNr).equals(textField.getText()))
                    message.setText("Congratulations! You guessed my number!");
                else
                    message.setText("No - '" + textField.getText()+
                                    "' is not the right number. Try again!");
            }
        });

        // arrange components using a grid layout
        panel.add(titel);
        panel.add(new SLabel("We want fun, so let's play a game!\n" +
                             "Try to guess a number between 1 and 10."));
        panel.add(textField);
        panel.add(okButton);
        panel.add(message);

        SFrame rootFrame = new SFrame();
        rootFrame.getContentPane().add(panel);
        rootFrame.setVisible(true);
    }
}</programlisting>
    </section>

    <section>
      <title id="web_xml_file">Set - Preparing the web.xml File</title>

      <para>In the next step we need to set up a <filename>web.xml</filename>
      file in the web/WEB-INF directory. This step is only needed once per
      application and it's only intention is to register the wingS servlet
      inside the servlet container and point wingS to our newly created
      application root class <code>HelloWingS</code>. A very minimalist
      <filename>web.xml</filename> file would look like this:</para>

      <programlisting>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE web-app
  PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
  "http://java.sun.com/dtd/web-app_2_3.dtd"&gt;

&lt;web-app&gt;
    &lt;servlet&gt;
        &lt;servlet-name&gt;HelloWingS&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.wings.session.WingServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;wings.mainclass&lt;/param-name&gt;
            &lt;param-value&gt;HelloWingS&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;HelloWingS&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/HelloWingS/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting>
    </section>

    <section id="hellowings-deployment">
      <title>Go! - Deployment in Servlet Container</title>

      <para>In the last step we only need to compile and package all our
      application files into a Servlet compatible Web Archive
      <abbrev>(WAR)</abbrev> file. You could do this either by manually
      compiling and zipping your application sources, but as this is a
      reccurring task it's better to let a tool do this task. Apache
      Ant<footnote>
          <para>You can download the latest version of Apache Ant at <ulink
          url="http://ant.apache.org/">http://ant.apache.org/</ulink></para>
        </footnote> is a very popular Java based build tool. We'll create a
      very simple Ant build file which will instruct Apache Ant to package our
      files as needed into our application <filename>WAR</filename> file. So
      just create a new <filename>build.xml</filename> file in your project
      directory with the following contents:</para>

      <programlisting>&lt;project name="HelloWingS" default="war"&gt;
    &lt;path id="build.classpath"&gt;
        &lt;fileset dir="lib" includes="*.jar"/&gt;
        &lt;fileset dir="web/WEB-INF/lib" includes="*.jar"/&gt;
    &lt;/path&gt;

    &lt;target name="prepare"&gt;
        &lt;mkdir dir="build/class"/&gt;
    &lt;/target&gt;

    &lt;target name="compile" depends="prepare"&gt;
        &lt;javac srcdir="src" destdir="build/class"&gt;
            &lt;classpath refid="build.classpath"/&gt;
        &lt;/javac&gt;
    &lt;/target&gt;

    &lt;target name="war" depends="compile"&gt;
       &lt;war destfile="build/hellowings.war"
            webxml="web/WEB-INF/web.xml"&gt;
         &lt;classes dir="build/class"/&gt;
         &lt;fileset dir="web"&gt;
            &lt;exclude name="**/web.xml" /&gt;
         &lt;/fileset&gt;
       &lt;/war&gt;
    &lt;/target&gt;

    &lt;target name="clean"&gt;
       &lt;delete dir="build"/&gt;
    &lt;/target&gt;
&lt;/project&gt;</programlisting>

      <para>After you've created the Ant build file we can execute it by
      calling Ant to parse and execute it. Use Ant to execute the war build
      target in your build file by executing Ant in your project home
      directory via</para>

      <para><userinput>&lt;path to your ant installation&gt;\bin\ant
      war</userinput></para>

      <para>Apache Ant will automatically look for a <filename>
      build.xml</filename> file in the current directory and try to execute
      the named target. If Ant fails to compile and complains that it does not
      know where to find the Java compiler you may need to specify the path to
      your JDK installation in the <envar>JAVA_HOME</envar> environment
      variable.</para>

      <para>If everything went well you should find a file named
      <filename>hellowings.war</filename> in the <filename> build</filename>
      directory of your project. So we're almost done. The only thing we need
      to do is to deploy this <code>WAR</code> file in your servlet container.
      If you use Jakarta Tomcat<footnote>
          <para>Jakarta Tomcat is available at <ulink
          url="http://tomcat.apache.org/">
          http://tomcat.apache.org/</ulink></para>
        </footnote>the only thing you need to do is to copy your <filename>
      hellowings.war</filename> file into the <filename> webapps</filename>
      directory, start Tomcat by calling <filename> bin/startup.bat</filename>
      and point your browser to <ulink
      url="http://localhost:8080/hellowings/HelloWingS">
      http://localhost:8080/hellowings/HelloWingS</ulink></para>

      <para><inlinemediaobject>
          <imageobject>
            <imagedata fileref="images/screen_hellowings.png" />
          </imageobject>
        </inlinemediaobject></para>
    </section>
  </chapter>

  <chapter>
    <title>The Developer's Perspective</title>

    <para>This chapter presents what you need to know to develop with the
    wingS framework.</para>

    <sect1>
      <title>Project setup</title>

      <para>Starting a new project with a new technology or framework often
      implies the need to learn a few things before you are able to fully
      leverage its benefits. Being confident that wingS has to offer really
      great advantages to you, when you are about to design and implement new
      web applications, this chapter tries to give you some hints to help you
      smoothly start developing applications with wingS.</para>

      <sect2>
        <title>Required libraries</title>

        <table frame="topbot" pgwide="0">
          <title>Overview of libraries shipped with wingS distribution</title>

          <tgroup cols="3">
            <colspec colwidth="2*" />

            <colspec colwidth="*" />

            <colspec colwidth="5*" />

            <thead>
              <row>
                <entry>Libary</entry>

                <entry>Required</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>wings.jar</entry>

                <entry>yes</entry>

                <entry>The wingS core classes</entry>
              </row>

              <row>
                <entry>css.jar</entry>

                <entry>yes</entry>

                <entry>Contains the default PLAF implementation for CSS
                capable browsers</entry>
              </row>

              <row>
                <entry>commons-logging.jar</entry>

                <entry>yes</entry>

                <entry>Apache Commons Logging API. Will delegate logging to
                Log4J or the standard java logging facility</entry>
              </row>

              <row>
                <entry>bsh-core.jar</entry>

                <entry>yes</entry>

                <entry>BeanShell for scripting support in
                <code>STemplateLayout</code></entry>
              </row>

              <row>
                <entry>kdeclassic-lfgr.jar</entry>

                <entry>optional</entry>

                <entry>Icons used in default wingS widget (i.e. graphical
                checkboxes, icons for table cell editors)</entry>
              </row>

              <row>
                <entry>dwr.jar</entry>

                <entry>optional</entry>

                <entry>Direct Web Remoting libraries for AJAX support. Refer
                to <xref linkend="client-side-scripting" /></entry>
              </row>

              <row>
                <entry>log4j-1.2.9.jar</entry>

                <entry>optional</entry>

                <entry>Deploy and configure Log4J with your application</entry>
              </row>

              <row>
                <entry>commons-httpclient-x.x.jar</entry>

                <entry>development only</entry>

                <entry>Apache Commons HTTP client used for <xref
                linkend="session-recording" /></entry>
              </row>

              <row>
                <entry>servlet.jar</entry>

                <entry>development only</entry>

                <entry>Servlet API interface declaration. Only required for
                compiling as implementation is provided by the used servlet
                container</entry>
              </row>

              <row>
                <entry>wingx.jar</entry>

                <entry>optional</entry>

                <entry>Additional highlevel components.</entry>
              </row>

              <row>
                <entry>cxx.jar</entry>

                <entry>optional</entry>

                <entry>PLAF for the additional highlevel components.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="tools">
        <title>Useful tools</title>

        <para>Here is a short list of tools you'll need or which might be
        helpful during development of wingS applications:</para>

        <variablelist>
          <varlistentry>
            <term>wingS</term>

            <listitem>
              <para>The latest version of the wingS framework can be always
              obtained from its website at <ulink
              url="http://wingsframework.org/"> http://wingsframework.org/</ulink>.
              If you want to be in touch with the latest development you can
              also retrieve a development snapshot by anonymous CVS
              access.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>apache ant</term>

            <listitem>
              <para>As a build tool to build and deploy your wingS application
              as demonstrated i.e. in <xref
              linkend="hellowings-deployment" />. Some powerful IDEs like
              IntelliJ IDEA offer powerful alternatives for quick
              (re-)deployments during the development phase. But this requires
              some in-depth knowledge of the required configuration so at
              first for beginners the common used approach with ant as
              deployment tool might be the better choice.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Mozilla FireFox</term>

            <listitem>
              <para>Though choosing a browser is somehow a matter of personal
              taste and preferences, we heavily encourage to try out the
              Mozilla FireFox browser available via <ulink
              url="http://www.getfirefox.com/">
              http://www.getfirefox.com/</ulink>. Beneath being a great
              browser, there are also some great plugins freely available
              which can be a great help during developing web applications.
              Since this is favoured by the core wingS development team, new
              features tend to work first with FireFox !</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Web Developer Extension and User Agent Switcher
            plugin</term>

            <listitem>
              <para>Chris Pederick donated these really two great plugins for
              the FireFox. They will be valuable tools when you are about to
              style your web application in detail. You can install them via
              <ulink url="http://chrispederick.com/work/">
              http://chrispederick.com/work/</ulink>.</para>

              <para>Refer to <xref linkend="live-css-editing" /> to learn how
              these plugins can help you.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Firebug Extension plugin for Firefox</term>

            <listitem>
              <para>This is a great javascript debugger, html- and css- editor,
              dom- inspector, ... available at:
              <ulink url="http://www.getfirebug.com/">
              http://www.getfirebug.com/</ulink>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>

    <sect1>
      <title>Designing the application architecture</title>

      <para>Thinking about the intended architecture of your application
      before starting with the implementation of the code is always a good
      idea. Here are some points to think about:</para>

      <itemizedlist>
        <listitem>
          <para>First of all try to determine the basic layout and the logical
          groups in your web application. <xref linkend="container-nesting" />
          shows an example of an application screen split into various logical
          areas. For floating layouts the <code>STemplateLayout</code> might be
          a good choice for the root panel (<code>contentPane</code>).</para>
        </listitem>

        <listitem>
          <para>Introduce your own new components for reccurring composite
          visual blocks in your application by derivating from the standard
          components. Examples might be specially styled components or
          repeating groups of component. You will save time, and your look
          and feel will be consistent.</para>
        </listitem>

        <listitem>
          <para>Try to keep the application styling at one place. Apart from
          using only a few, or possibly only one template file for global
          layout, and creating custom components, its also a good idea to
          avoid spreading styling instructions all over your code. Instead of
          manually setting the foreground color to red for error notification
          labels try either to introduce a new, global CSS style inside your
          custom CSS file and apply this to the according <code>SLabel,</code>
          or to create a special derived <code>ErrorLabel</code> subclass
          which gathers the styling specific code instructions.</para>
        </listitem>

        <listitem>
          <para>For larger projects introduce your own subclasses for all
          major wingS components, or use a factory pattern. This allows you to
          modify or extend the default behaviour of specific UI components
          easily in one place during later phases of the project runtime. E.g.
          think of enhancing text based <code>SButton</code> with dynamical
          rendered icons.</para>
        </listitem>

        <listitem>
          <para>Try to continue the MVC concept in wingS inside your
          application code. This means not to implement the business logic
          directly inside the UI components, but to delegate i.e. the click of
          a delete button to a <code>delete(selectedObject)</code> method call
          in a Controller class collecting all the business logic.</para>
        </listitem>

        <listitem>
          <para>Leverage the event concept by learning how to efficiently use
          the listeners interfaces provided by the wingS components and
          introduce your own event based implementations inside your
          application logic.</para>
        </listitem>
      </itemizedlist>

      <para>Most architecture and design patterns which are a good choice for
      designing Swing-based applications are also a good choice for designing
      wingS based web applications. So if you are already familiar with
      designing Swing applications choosing the right application design for
      your web application will be an easy task with wingS.</para>
    </sect1>

    <sect1>
      <title>The basic components</title>

      <sect2>
        <title>Frames and Top-Level Components</title>

        <sect3>
          <title id="Frame">Frames</title>

          <para>If you took a look at <xref linkend="hellowings" /> you
          probably realized that the main thing the entry class does, is
          simply constructing a new <code>SFrame</code> container component
          (see also <xref linkend="containers" />), adding further wingS
          components to it and finally calling <code>setVisible(true)</code>
          on this frame. So you probably already guessed that the root of all
          wingS applications is a frame, constructed in the root class of your
          application:</para>

          <programlisting>public class MyWingSApp {
        public MyWingSApp() {
            SFrame rootFrame = new SFrame("Window title");
            rootFrame.getContentPane().add(...);
            // ...
            rootFrame.setVisible(true);
        }
    }</programlisting>

          <para>Hence you can think of SFrame as an equivalent to a window in
          common desktop environments like Microsoft Windows or KDE.</para>

          <para>Equally, at a more technical level, an <code>SFrame</code>
          corresponds directly with the dynamically created HTML document that
          is delivered to the browser as the current view of your web
          application. During the lifecycle of a typical wingS application
          session most of the time there will exist exactly one
          <firstterm>root frame</firstterm>. This root frame contains all the
          widgets currently visible and can be retrieved at any time via the
          session manager:</para>

          <programlisting>SFrame rootFrame = SessionManager.getSession().getRootFrame();</programlisting>

          <para>Though in most cases every session has only exactly one
          instance of <code>SFrame</code>, there are situations where multiple
          frames may exist, sequentially or concurrently, during a session.
          This is especially the case for frameset based applications<footnote>
              <para>browser window internally divided into different
              documents</para>
            </footnote> or wingS applications opening new browser windows for
          sub dialogs.</para>
        </sect3>

        <sect3>
          <title id="InternalFrame">Internal Frames</title>

          <para>Besides regular, single-framed single-windowed web
          applications wingS offers a great feature: It can simulate
          <firstterm>Multiple Document Interface</firstterm>
          (<abbrev>MDI</abbrev>) applications. MDI applications are
          applications hosting multiple documents or windows inside one parent
          application.</para>

          <para>In wingS this can be achieved easily using
          <code>SInternalFrame</code> inside a <code>SDesktopPane</code>. The
          desktop demo shipped with wingS demonstrates in a very impressive
          way how internal frames can be used to build a multi-document Editor
          with RSS reader and Drag &amp; Drop support.</para>

          <screenshot>
            <screeninfo>Screen shot from the wingS Desktop demo with internal
            frames and Drag &amp; Drop support</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/desktop_screenshot.png" scale="" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <para>Please refer to the source code of the desktop demo for an
          example of how to use internal frames. It can be found in the
          <filename>demo/desktop</filename> directory of the wingS
          distribution.</para>
        </sect3>

        <sect3>
          <title id="Frameset">Frameset</title>

          <para><emphasis>Please note that the frameset support in wingS is
          currently experimental!</emphasis></para>

          <para>Using framesets is a way to separate the content displayed by
          the browser into two or more different and independent documents.
          Using framesets you can split the available space of the browser
          window in different sub-areas each called a
          <firstterm>Frame</firstterm>. In each Frame the browser displays an
          independent document. This corresponds exactly with the usage of the
          HTML frameset tag.</para>

          <note>
            <para>Please don't mix the meaning of the term
            <emphasis>Frame</emphasis> as used in the context of browser
            framesets with its meaning in this chapter as instances of
            <code>SFrame</code></para>
          </note>

          <para>The following code snippet shows how to construct a new
          frameset split horizontally into two inner frames:</para>

          <programlisting>SFrameSet frameset = new SFrameSet(new SFrameSetLayout("50%,50%", null));
SFrame leftFrame = new SFrame("left frame");
SFrame rightFrame = new SFrame("right frame");
horizontal.add(leftFrame);
horizontal.add(rightFrame);
frameset.setVisible(true);</programlisting>

          <para>This example created two new inner frames. Each of this frame
          will probably contain further displayed components. As an action in
          one frame may influence the presentation of a component in the other
          frame, this would mean that on every request the whole frameset will
          get reloaded, i.e. both inner frames will refresh.</para>

          <bridgehead>Avoiding unnecessary reloads with the Reload
          Manager</bridgehead>

          <para>The reload manager offers a way to avoid this. To use the
          reload manager you will need to add an additional, invisible frame
          to your frameset. In contrast to the default case, only this
          invisible frame will be used to fire the initial request on any user
          action. On the server side the reload manager determines which of
          the inner frames contain modified components, and returns a list of
          the inner frames to be updated to this invisible inner frame. Hence
          after receiving the response the hidden reload manager frame will
          trigger only explicit reloads of those frames whose visual
          representation has changed.</para>

          <para>For a detailed example of how to use framesets and the reload
          manager please refer to the frameset demo available in the
          <filename>demo/frameset</filename> directory of the wingS
          distribution.</para>
        </sect3>
      </sect2>

      <sect2>
        <title>SComponent</title>

        <para>In the previous section you already got in contact with your
        first wingS component: <code>SFrame</code> and its variants. Now we
        are about to introduce the root class of all wingS components
        <code>SComponent</code>. This class is the counterpart of the
        <code>JComponent</code> class in Swing. As in Swing all wingS widgets
        are subclasses and hence instances of <code>SComponent</code>.</para>

        <para>The following sections we'll describe in more detail about the
        usage and different between the different <code>SComponent</code>
        variant. But first we'll explain the commons between all wingS
        components. Below you'll find a table which points out hand-selected
        methods with a short explanation of their meaning as declared in
        <code>SComponent</code>.</para>

        <table>
          <title>Selected methods and properties of
          <code>SComponent</code></title>

          <tgroup cols="2">
            <colspec colwidth="*" />

            <colspec colwidth="2*" />

            <thead>
              <row>
                <entry>Method</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><code>get/setName()</code></entry>

                <entry>The current name or <emphasis role="bold">id</emphasis>
                of this component. It is initially set on demand but can be
                overwritten with custom values. This name will also appear
                inside the generated HTML code, hence it must contain only a
                restricted set of characters. The name must be unique throughout
                the session! Otherwise event dispatching won't work consistently.</entry>
              </row>

              <row>
                <entry><code>getParent()</code></entry>

                <entry>The <emphasis role="bold">parent container</emphasis>
                owning this component. This is set by the wingS framework at
                the time point when this component is added to another
                container like a panel or the root frame of the
                application.</entry>
              </row>

              <row>
                <entry><code>getParentFrame()</code></entry>

                <entry>The <emphasis role="bold">root frame</emphasis> in
                which this component is placed as being recursively accessible
                via <code>getParent()</code>.</entry>
              </row>

              <row>
                <entry><code>get/setBackground()</code></entry>

                <entry>Defines an optional <emphasis role="bold">background
                colour</emphasis> for this component.</entry>
              </row>

              <row>
                <entry><code>get/setForeground()</code></entry>

                <entry>Defines an optional <emphasis role="bold">foreground
                colour</emphasis> for this component. On <code>SLabel</code>
                instances i.e. this will become the colour of the
                text.</entry>
              </row>

              <row>
                <entry><code>get/setBorder()</code></entry>

                <entry>Apply a border. Gives components a border and/ or applies
                insets. Besides the well known types <code>SLineBorder</code>,
                <code>SEtchedBorder</code>, etc. there is the <code>SDefaultBorder</code>,
                that components have attached by default. It makes the component appear,
                as defined in the stylesheet (see <xref linkend="css-styles" />). If the
                border property is set to null, there will be no border and no insets and
                the rules in the stylesheet have no affect.</entry>
              </row>

              <row>
                <entry><code>get/setHorizontalAlignment()</code></entry>

                <entry>Sets the <emphasis role="bold">horizontal
                alignment</emphasis> of this component inside the parent
                container (<code>LEFT</code>, <code>RIGHT</code>or
                <code>CENTER</code>). The effect of this value depends on the
                layout manager assigned the parent container.</entry>
              </row>

              <row>
                <entry><code>get/setVerticalAlignment()</code></entry>

                <entry>As previous method the <emphasis role="bold">vertical
                alignment</emphasis> accepting <code>TOP</code>,
                <code>CENTER</code> and <code>BOTTOM</code> as valid
                values.</entry>
              </row>

              <row>
                <entry><code>get/setPreferredSize()</code></entry>

                <entry>Apply a <emphasis role="bold">preferred size</emphasis>
                to a component. You may choose relative percentage values
                (<code>new SDimension("50%", null)</code>) as well as absolute
                pixel value as parameters (<code>new SDimension(150,
                SDimension.AUTO_INT)</code>). Another typical usage is to
                assign the global SDimension.FULL_WIDTH instance i.e. to a
                panel or similar component: This achieves that the component
                is stretched by the browser as far as possible to take up the
                full available width. Please be aware that the rendering
                result may vary depending on the browser. This is especially the
                case for relative vertical dimensions (FULLHEIGHT).</entry>
              </row>

              <row>
                <entry><code>get/setStyle()</code></entry>

                <entry>The current <emphasis role="bold">CSS style
                class</emphasis>. By default the wingS PLAF assigns every
                component its unqualified Java class name as CSS style name.
                So for <code>SButton</code> instances this will have
                <code>"SButton"</code> as default value. Please be aware that
                the default wingS style definitions are defined using these
                default CSS class names. If you want to keep the wingS default
                styles but additionally apply your own styles defined in a
                separate CSS file, you should append your custom CSS style
                class names to a component separated by a space (i.e.
                <code>"SButton myClass"</code>).</entry>
              </row>

              <row>
                <entry><code>get/setToolTipText()</code></entry>

                <entry>Apply a <emphasis role="bold">tool tip
                text</emphasis>which will pop up after a short delay when the
                mouse pointer is over the component. The behaviour of tools
                tips can be defined more in detail via the
                <code>SToolTipManager</code>.</entry>
              </row>

              <row>
                <entry><code>get/setShowAsFormComponent()</code></entry>

                <entry>The value of this property influences the <emphasis
                role="bold">technical representation of some components</emphasis>
                and the <emphasis role="bold">submit behaviour of most
                components</emphasis>. For example, an SList is either rendered
                as a select tag or as an unordered list (ul) of links. For most
                components, this decides only, if the whole form will be sumbitted
                on click or if the form content gets lost and a GET request will be
                sent. HTML Check boxes are only rendered in browsers if you nest
                them inside a HTML <code>&lt;FORM&gt;</code> element. Therefore
                wingS will render them as clickable images if it is not contained
                in an <code>SForm</code>. You can achieve the same behaviour inside
                forms on setting this value to <code>false</code>. A very common usage
                of this property is to force <code>SButton</code> to appear as
                text links and not browser submit buttons inside forms.</entry>
              </row>

              <row>
                <entry><code>setAttribute()</code></entry>

                <entry>Dynamically set a <emphasis role="bold">CSS property
                value</emphasis> for a component. You can use this method to
                define any arbitrary CSS property/value pair on the current
                component. It will be rendered as an inline style.</entry>
              </row>

              <row>
                <entry><code>is/setVisible()</code></entry>

                <entry>By default being <code>true</code> you can use this
                property to <emphasis role="bold">hide any
                component</emphasis>from the current view.</entry>
              </row>

              <row>
                <entry><code>is/setEnabled()</code></entry>

                <entry>This property has a different meaning on different
                components. Mainly it is used to define<emphasis
                role="bold">input elements as inactive</emphasis> respectively
                read only.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>Besides the explained methods <code>SComponent</code> declares
        further methods for: <itemizedlist>
            <listitem>
              <para>Adding and removing various <emphasis role="bold"> event
              listeners</emphasis></para>
            </listitem>

            <listitem>
              <para>Applying <emphasis role="bold">key bindings</emphasis> and
              <emphasis role="bold">component context menus</emphasis> on a
              component</para>
            </listitem>

            <listitem>
              <para>Modifying the used <emphasis role="bold">component
              renderer</emphasis> (PLAF)</para>
            </listitem>

            <listitem>
              <para>Requesting the <emphasis role="bold">input
              focus</emphasis> for the next page refresh</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2 id="containers">
        <title>SContainer</title>

        <para>You probably guessed it already: <code>SContainer</code> is a
        derived variant of <code>SComponent</code> that can container further
        <code>SComponent</code>s. Therefore it declares various methods to add
        other <code>SComponent</code> to it. Furthermore a container offers
        methods to access and modify the responsible <firstterm>layout
        manager</firstterm>. But let's start from the beginning.</para>

        <sect3>
          <title id="container-nesting">Hierarchical nesting of
          containers</title>

          <para>Contrary to other web applications framework, wingS is tries
          to be as component oriented as possible. One main concept of
          component-oriented application design is that you take simple
          component and arrange them to more complex compound components until
          you built up your complete application. Hence containers are the key
          feature for a hierarchical component-oriented design approach. The
          figure below shows how you can used and nest components to a
          complete screen dialog.</para>

          <figure>
            <title>Example of how to build complex application via nesting
            components</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/hierarchical_screenlayout.png" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Similar to Swing the containers are only responsible for
          holding and managing the list of contained inner components. The
          layouting of the contained components inside the space taken up by
          the container component will be delegated to the layout manager.
          Refer to <xref linkend="LayoutManager" /> for more information about
          details regarding the different layout managers.</para>

          <para>After construction you can simply add the components which
          should be contained inside using one of the <code>add(SComponent
          component)</code> methods. Please note the variants of the
          <code>add</code> method allowing you to pass a <firstterm>Layout
          constraint</firstterm> as additional parameter. Some layout
          managers, such as the <code>SBorderLayout</code> or the
          <code>STemplateLayout</code> need additional information about where
          exactly you want to place the passed component inside their provided
          layout style, while simpler ones like the <code>SGridLayout</code>
          will just choose the next available place.</para>

          <para>Finally you just need to attach your newly created container
          to the root container as shown in <xref linkend="hellowings" /> to
          make it visible to the user.</para>
        </sect3>

        <sect3>
          <title>The basic SPanel container</title>

          <para>The type of container you'll probably encounter most of the
          times during you every-day writing of wingS application i<code>s
          SPanel</code>. This is the simplest form a container and like every
          <code>SContainer</code> it will be initialized with a default layout
          manager (<code>SFlowLayout</code>, can be overridden via <filename>
          default.properties</filename>) but you probably will prefer to
          define your own layout manager.</para>

          <programlisting>SPanel panel = new SPanel();
SGridLayout gridLayout = new SGridLayout(2);

panel.setLayout(gridLayout);
panel.add(new SLabel("First name:"));
panel.add(new STextField());
panel.add(new SLabel("Last name:"));
panel.add(new STextField());
panel.add(new SButton("Submit"));

SForm inputForm = new SForm();
inputForm.add(panel);</programlisting>

          <para>In this example we created a <code>SPanel</code> container,
          assigned a two-columed grid layout as layout manager and added
          several components to this container. In the last step we wrapped
          this container inside another container: <code>SForm</code>.</para>
        </sect3>

        <sect3>
          <title id="SForm">The SForm container for input elements</title>

          <para>What's the reason behind the <code>SForm</code> instance in
          the previous example? If you are aware of HTML and already designed
          some web pages by coding HTML code directly, you'll probably know
          that input elements like text fields, submit buttons, radio buttons
          and so on require to be surrounded by a <code>&lt;FORM&gt;</code>
          HTML tag.</para>

          <para>The <code>SForm</code> container is the object-oriented
          equivalent for this HTML tag. So if you want to place input elements
          on your screen you must ensure that the container or one of its
          parent container is a SForm. Please be aware that contrary to the
          other containers available in wingS you are <emphasis
          role="bold">not allowed to nest SForm</emphasis> containers into
          each others! This reflects the same HTML restriction.</para>

          <para>Typically it's sufficient if you use one SForm container on
          the very top of your component hierarchy. The <code>SForm</code>
          container has also a property which advises the browser to send the
          input via <firstterm>HTTP POST</firstterm> or <firstterm>HTTP
          GET</firstterm> calls.</para>
        </sect3>

        <sect3>
          <title>Overview of all available container components</title>

          <para>There are some more containers available in wingS. Below you
          find a short summary of them including a short description of their
          characteristics.</para>

          <table>
            <title>Overview of all public <code>SContainer</code>
            implementations</title>

            <tgroup cols="2">
              <colspec colwidth="*" />

              <colspec colwidth="2*" />

              <thead>
                <row>
                  <entry>Container class</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><code>SAnchor</code></entry>

                  <entry>A very simple container to wrap a link around the
                  inner components. Typically you use this to wrap
                  <code>SLabel</code> for creating links on external
                  URLs.</entry>
                </row>

                <row>
                  <entry><code>SDesktopPane</code></entry>

                  <entry>A special container to manager internal frames as
                  demonstrated in the wingS desktop demo. Only needed for MDI
                  applications.</entry>
                </row>

                <row>
                  <entry><code>SForm</code></entry>

                  <entry>Refer to <xref linkend="SForm" />. Wrap contained
                  components with a HTML <code>&lt;FORM&gt;</code> tag. May
                  not contain other <code>SForm</code> containers.</entry>
                </row>

                <row>
                  <entry><code>SMenuBar</code></entry>

                  <entry>A special container accepting <code>SMenuItem</code>
                  object. Used to build a desktop-like menu bar. Refer to the
                  desktop demo.</entry>
                </row>

                <row>
                  <entry><code>SPanel</code></entry>

                  <entry>The most common and basic container.</entry>
                </row>

                <row>
                  <entry><code>SRootContainer</code></entry>

                  <entry>Abstract superclass for root containers. Root
                  containers are the topmost containers which are not
                  contained in other containers</entry>
                </row>

                <row>
                  <entry><code>SFrame</code></entry>

                  <entry>Refer to <xref linkend="Frame" />. Typically the root
                  container of every wingS session is a <code>SFrame</code>
                  instance.</entry>
                </row>

                <row>
                  <entry><code>SInternalFrame</code></entry>

                  <entry>Refer to <xref linkend="InternalFrame" />. A root
                  container for MDI web applications.</entry>
                </row>

                <row>
                  <entry><code>SFrameSet</code></entry>

                  <entry>Refer to <xref linkend="Frameset" />. A root
                  container to create frameset based web applications. Will
                  container further <code>SFrame</code> instances for each
                  frameset segment.</entry>
                </row>

                <row>
                  <entry><code>SScrollPane</code></entry>

                  <entry>A special pane to create paged or graphical scroll
                  panes.</entry>
                </row>

                <row>
                  <entry><code>STabbedPane</code></entry>

                  <entry>Neat container to create a tabbed stack of various
                  components as demonstrated in the WingSet demo.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>
      </sect2>

      <sect2>
        <title>Labels and other display components</title>

        <para>We already showed how to combine and arrange
        <code>SComponent</code>s using containers and simple layout managers.
        So it is time to know how you can place content in them.</para>

        <sect3>
          <title>Simple labels</title>

          <para>The simplest way to present information to the user is by
          using labels. You already encountered instances of
          <code>SLabel</code> in the preceding examples so we will explain in
          a bit more depth the usage and capabilities of this widget
          component. Here are some usage examples</para>

          <programlisting>// You can just pass the text to display as parameter of the constructor
SLabel simpleLabel = new SLabel("A simple label");

// ...but it can be changed at any time
SLabel emptyLabel = new SLabel();
// ... i.e. when something happened:
emptyLabel.setText("The trigger event occured! \n"+
                   "Second line of label");

// Extensive formatting can be done done during runtime
SLabel fancyLabel = new SLabel("A green, bold italic label");
fancyLabel.setForeground(Color.green);
fancyLabel.setFont(new SFont(SFont.BOLD + SFont.ITALIC));
fancyLabel.setWordWrap(true); // allow word wrapping</programlisting>

          <para>As you can see, the text inside a label can be changed at any
          time using the <code>setText()</code> bean property setter. Using
          the properties declared in <code>SComponent</code> the font size,
          style, face as well as the text and background color can be easily
          controlled using pure Java code.</para>

          <para>Please note that starting with version 2.0 the labels word
          wrapping behaviour changed to be in sync with Swing. To allow the
          browser to line-break a label call <code>setWordWrap(true)</code> on
          it.</para>

          <bridgehead>Advanced usages</bridgehead>

          <para>As in the Swing <code>JLabel</code>, the <code>SLabel</code>
          component in wingS also accepts HTML formatting directives like
          <code>&lt;b&gt;...&lt;/b&gt; or
          <code>&lt;i&gt;...&lt;/i&gt;</code></code>inside the text if you
          prefix the text with an <code>&lt;HTML&gt;</code> tag. You should
          use this carefully to avoid mixing of view and logic.</para>

          <para>If you assign specific styles on a regular basis to a
          component like a label, you should consider to declare a static new
          CSS style class and assign this to the label. This allows you on the
          one hand to modify this style globally in the style declaration, and
          avoids on the other hand the generation of many dynamically
          generated CSS styles generated by the wingS framework. Think for
          example of error labels you might want to have in a specific style.
          In your programming code you would additional assign a new CSS class
          to a label:</para>

          <programlisting>SLabel errorLabel = new SLabel();
<emphasis role="bold">errorLabel.setStyle(errorLabel.getStyle() + " errorLabel");</emphasis>
errorLabel.setVisible(false); // hide by default

//.. an error occured
errorLabel.setText("An error occured during the last operation");
errorLabel.setVisible(true);</programlisting>

          <para>This will allow the web designer in your project to declare a
          new static CSS style an optional application-specific CSS style
          sheet.</para>

          <programlisting>.errorLabel {
    color: #f00;
    font-weight: bold;
    border: 1px solid #ddd;
}</programlisting>

          <para>Please refer to <xref linkend="css-styles" /> for more
          information about using CSS to style your application in
          detail.</para>
        </sect3>

        <sect3>
          <title>Images</title>

          <para>The <code>SIcon</code> interface is your friend if you want to
          include images in your wingS application. An <code>SIcon</code> can
          be an image retrieved from an arbitrary source and used in
          conjunction with various wingS widgets. By default wingS comes with
          five different implementations of icon providers, each capable of
          handling a different source as source for the image data to be
          displayed. Possible sources are</para>

          <itemizedlist>
            <listitem>
              <para>static image files deployed with your application
              (<code>SFileIcon</code>)</para>
            </listitem>

            <listitem>
              <para>static image files reachable via an absolute or relative
              URL in your application (<code>SURLIcon</code>)</para>
            </listitem>

            <listitem>
              <para>static image files contained in your classpath
              (<code>SResourceIcon</code>)</para>
            </listitem>

            <listitem>
              <para>static image data contained in a byte array
              (<code>SByteArrayIcon</code>)</para>
            </listitem>

            <listitem>
              <para>and dynamical generated Swing <code>ImageIcon</code>
              images (<code>SImageIcon</code>)</para>
            </listitem>
          </itemizedlist>

          <para>Please note an important difference between the
          <code>SImageIcon</code> and the other mentioned <code>SIcon</code>
          implementations: While the content of the others images cannot
          change during runtime, an <code>ImageIcon</code> can have an updated
          image content during every request. Allowing you to display any
          dynamically generated image this has the side-effect that wingS
          needs to create and send new graphic data to the browser. So to
          include just image files in your application ensure that you use one
          of the other implementations as demonstrated in the example
          below:</para>

          <programlisting>// image contained in the class path
SResourceIcon javaCupIcon = new SResourceIcon("org/wings/icons/JavaCup.gif");
// image deployed in a icons directory of you application
SURLIcon okButtonIcon = new SURLIcon("../icons/ok-button.png");
// a file in the file system
SFileIcon background = new SFileIcon(new File("/home/blueshift/background.jpg"));

// Use i.e. just for display
SLabel javaCup = new SLabel(javaCupIcon);
// ..or as clickable button
SButton okButton = new SButton(okButtonIcon);
// or i.e. as container background
panel.setBackgroundImage(background);</programlisting>

          <para><code>SIcon</code> images can be used in conjunction with many
          wingS widgets. But the most commons usage are in combination with
          <code>SLabel</code> for just displaying a graphic or with
          <code>SButton</code> to create graphical buttons in your
          application.</para>
        </sect3>

        <sect3>
          <title>Further display widgets</title>

          <para>Below you'll just find a list of further pure display-only
          widgets.</para>

          <para><table>
              <title>Further non-input wingS components</title>

              <tgroup cols="2">
                <colspec colwidth="1*" />

                <colspec colwidth="2*" />

                <thead>
                  <row>
                    <entry>Component</entry>

                    <entry>Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><code>SSeparator</code></entry>

                    <entry>Simple implementation of the HTML
                    <code>&lt;HR&gt;</code> horizontal ruler element.
                    Alternatively you can set single border lines on a
                    component like
                    <code>setAttribute(CSSProperty.BORDER_BOTTOM, "1px solid
                    #ccc");</code></entry>
                  </row>

                  <row>
                    <entry><code>SSpacer</code></entry>

                    <entry>An invisible component that can be used as spacer
                    component. Typically renders as invisible pixel stretched
                    to the desired size.</entry>
                  </row>

                  <row>
                    <entry><code>SProgressBar</code></entry>

                    <entry>A progress bar indicator as demonstrated in the
                    WingSet demo.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect3>
      </sect2>

      <sect2>
        <title>Buttons and Events</title>

        <para>Buttons are simple, clickable input components. Instances of a
        button can present themselves as regular GUI buttons (HTML submit
        buttons), clickable text links or clickable images. To react to
        activations of a button, action listeners can be registered on buttons
        and will receive events notifying them about the click.</para>

        <sect3>
          <title>Creating buttons</title>

          <para>To create and display a button just create a new
          <code>SButton</code> instance and add it to a visible container. By
          default buttons will appear as regular buttons if they are nested
          inside a <code>SForm</code> container, otherwise they will appear as
          simple text links due to constraints of the browser. Please refer to
          <xref linkend="SForm" /> to learn more about the role of the
          <code>SForm</code> container. You can force <code>SButton</code>to
          render as text links even if contained inside a form using a
          <code>setShowAsFormComponent(false)</code> method call.
          Alternatively you can use images as clickable buttons (perhaps
          dynamically modified at runtime). Below you will find a few example
          of how to create buttons</para>

          <programlisting>// a simple default button
SButton simpleButton = new SButton("ok");

// text link button
SButton textLinkButton = new SButton("Request support");
textLinkButton.setShowAsFormComponent(false);

// a graphical button
SButton graphicalButton = new SButton(
        new SResourceIcon("org/wings/icons/JavaCup.gif"));</programlisting>

          <para>The default style of form buttons are modified in the default
          CSS files delivered with the wingS default PLAF. You might want to
          attach a new custom CSS file and modify their appearance
          there.</para>
        </sect3>

        <sect3>
          <title>Listening to Events</title>

          <para>Most widgets provide various "listener" interfaces so that you
          can supply your own callbacks in order to handle these. Here we
          create a push button and register a callback to receive notification
          when the button is pushed. Note that the button is declared final so
          that we can access it within the anonymous callback class
          <programlisting>final SButton submit = new SButton("Search");
form.add(submit);
ActionListener al = new ActionListener() {
  public void actionPerformed(ActionEvent e) {
     // ... trigger search
  }
};

submit.addActionListener(al);</programlisting></para>

          <para>In the above example the callback only receives events when
          the button is pushed. An alternative is to make the form the
          listener, since if the form is to have a "default" button (when the
          user hits the enter key) then it is the form which will be notified.
          In this case you would add the listener callback to the form instead
          of the button: <programlisting>form.addActionListener(al);</programlisting></para>

          <para>The ActionEvent.getSourctree() will determine whether the
          event comes from the button or the form so you can use the following
          tests in your callback: <programlisting>public void actionPerformed(ActionEvent e) {
  if(submit == e.getSource())
  // submit button pushed
  if(form == e.getSource())
  // user hit enter key
}</programlisting></para>

          <para>You can extract data from the text field as shown above with a
          call to STextField.getText().</para>

          <para>Whenever a listener is attached to a component or its model,
          wingS assures, that the listener is invoked immediately after the
          user modifies the component. For example, if you add a
          DocumentListener to a textfield's document, wingS will add a form
          submission javascript listener (onchange) to the respective input
          field.</para>
        </sect3>
      </sect2>

      <sect2>
        <title>Input components</title>

        <para>Input to your wingS application comes in the form of state
        changes to the various widgets you have created, and in application
        events that you can listen to. To illustrate this we use the simplest
        case of a form which contains an entry field and a button.</para>

        <para>Recall that user input for entry fields must be contained in a
        <code>SForm</code> . The first task is to create the form and entry
        field (layout details omitted): <programlisting>SForm form = new SForm(new STemplateLayout(...));
// ... add to top pane, add layout
// The following assumes a template layout, the names "W1", "W2"
// identify layout components
SLabel label = new SLabel("Enter stuff:");
STextField text = new STextField("initial value");
form.add(label, "W1");
form.add(text, "W2");</programlisting></para>

        <para>The text field variable might be made a class member variable so
        that you can access it later to retrieve its contents:
        <programlisting>String dataValue = text.getText();</programlisting></para>

        <para>Alternatively you might declare it as a local final variable,
        and access it from within a local closure callback, reacting to user
        input as shown in the next section.</para>

        <sect3>
          <title>Text input fields and areas</title>

          <para>The example below demonstrates that you can restrict the
          number of columns independently from the physical size a text input
          field. Furthermore text areas can be advised to line-wrap the
          entered text at their physical, virtual size or not to wrap the text
          themselves at all (default).</para>

          <programlisting>// A text field restricted to 40 character and
// a fixed width of 400px
STextField simpleField = new STextField("default text");
simpleField.setMaxColumns(40);
simpleField.setPreferredSize(new SDimension(400, SDimension.AUTO_INT));

// An multilines input field with 6 lines and 40 colmns
// Line will wrap after 40 colums
STextArea textArea = new STextArea(6,40);
textArea.setLineWrap(STextArea.VIRTUAL_WRAP);

// A read only textfield
STextField readonlyField = new STextField("read only");
readonlyField.setEditable(false);</programlisting>

          <para>You can retrieve the entered text via the
          <code>getText()</code> method i.e. as an reaction of an "O.K." or
          "Save" button click as already drafted in the previous
          examples.</para>

          <para>It is worth mentioning a less obvious source of event triggers
          - the text fields/areas themselves ! You can attach Swing-like
          document change listeners which will notify every value update of a
          text component.</para>

          <programlisting>textArea.addDocumentListener(new SDocumentListener() {
    public void insertUpdate(SDocumentEvent e) {
        STextComponent source = (STextComponent) e.getSource();
        System.out.println("Text after insertion of " +
                e.getLength()+" characters: "+source.getText());
    }

    public void removeUpdate(SDocumentEvent e) {
        STextComponent source = (STextComponent) e.getSource();
        System.out.println("Text after removal of " +
                e.getLength()+" characters: "+source.getText());
    }

    public void changedUpdate(SDocumentEvent e) {
        // won't happen - refers to style changes, not text changes
    }
});                                                                 </programlisting>
        </sect3>

        <sect3>
          <title>Check boxes and Radio boxes</title>

          <para>Check boxes and radio boxes are widgets that can be either
          selected or unselected. While check boxes can be checked and
          unchecked independently, radio boxes always allow only one instance
          to be selected within a button group.</para>

          <para>Similar to the behaviour of <code>SButton</code>, their
          appearance differs depending on if they are contained inside a form
          or not. If those input elements are not contained inside a <xref
          linkend="SForm" /> element, they will be rendered as graphical
          widgets. You can force the graphical version, as well as customising
          the used images for this case.</para>

          <programlisting>// You gotta' decide yourself for exact one gender ;-)
SButtonGroup buttonGroup = new SButtonGroup();
SRadioButton optionF = new SRadioButton("Female");
SRadioButton optionM = new SRadioButton("Male");
buttonGroup.add(optionF);
buttonGroup.add(optionM);

// a checked checkbox
SCheckBox agreedBox = new SCheckBox("accept disclaimer");
agreedBox.setSelected(true);

// an unmodifyable checkbox rendered as graphic
SCheckBox disabledCheckBox = new SCheckBox("Umodifyable checkbox");
disabledCheckBox.setEnabled(false);
disabledCheckBox.setShowAsFormComponent(false);
disabledCheckBox.setDisabledIcon(new SResourceIcon(...));</programlisting>
        </sect3>

        <sect3>
          <title>Comboboxes and selection lists</title>

          <para>Comboboxes are one-lined item selection widgets with further
          options to choose via a drop-down menu. SLists have two and more
          lines and support multiple item selection modes<footnote>
              <para>Typically triggered using the Shift-key and Strg-key in
              the browser when clicking on items.</para>
            </footnote> additionally to the single selection mode offered also
          by the combobox.</para>

          <programlisting>// A combo box containing a coloured label and two string values
SLabel color = new SLabel(Color.green.toString());
color.setForeground(Color.green);

SComboBox comboBox = new SComboBox();
comboBox.setModel(new DefaultComboBoxModel(new Object[]{ "element1", color, "element3" }));

// A simple selection list
SList multiSelectionList = new SList();
multiSelectionList.setName("multiple");
multiSelectionList.setSelectionMode(SList.MULTIPLE_SELECTION);
multiSelectionList.setListData(new String[] {"Item 1", "Item 2", "Item 3"});</programlisting>

          <para>You can attach <code>ListSelectionListener</code> to
          <code>SList</code> instances and <code>ItemListener</code> to
          <code>SComboBox</code> instances to receive events on selection
          changes.</para>

          <programlisting>comboBox.addScriptListener(ComboBoxCG.JS_ON_CHANGE_SUBMIT);</programlisting>
        </sect3>

        <sect3>
          <title>Special Input fields</title>

          <para>Last but not least we have to mention two more special input
          component <code>SFormattedTextField</code> and
          <code>SPasswordField</code>. The latter one is simply the password
          entry variant of a <code>STextField</code> meaning that typed
          characters will appear obfuscated i.e. as asterix instead of being
          displayed plain-text.</para>

          <para>The <code>SFormattedTextField</code> is a conceptual very
          interesting example of an <firstterm>AJAX</firstterm> based
          components. To work correctly you must deploy and register the DWR
          jar and servlet correctly as shown in WingSet example. Below you'll
          find a usage example</para>

          <programlisting>SFormattedTextField numberFormattedField =
           new SFormattedTextField(new NumberFormatter());

private static class NumberFormatter extends SAbstractFormatter {
    NumberFormat format = NumberFormat.getNumberInstance(
            SessionManager.getSession().getLocale());

    public Object stringToValue(String text) throws ParseException {
        return text == null || text.trim().length() == 0
                ? null : format.parse(text.trim());
    }

    public String valueToString(Object value) throws ParseException {
        return value == null ? "" : format.format(value);
    }
}</programlisting>

          <para>This component does the following: If you enter the
          <code>SFormattedTextField</code> you can enter or modify the current
          value of the text field. If you entered a parseable value, the value
          of the text field will be updated to the parsed value. Otherwise the
          input field will regain the input focus and be marked red to
          indicate an input error.</para>

          <bridgehead>Technical background</bridgehead>

          <para>This is realized in the following way: When you try to leave
          the text field, e.g. by pressing the <keysym>Tab</keysym> key to
          jump to the next input field, the text field will trigger a XML
          encoded request to the server in the background. There the DWR
          servlet takes the request and delegates it to the Java listener
          (here: <code>NumberFormatter</code>). If it succeeds the value of
          the text field will be updated with the formatted value returned by
          this. If it fails and indicates this by throwing a
          <code>ParseException</code> the cursor will be set back to the input
          field and it will be marked red to grab the user's attention.</para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Sophisticated components</title>

      <sect2 id="stable">
        <title>STable</title>

        <para>With the <code>STable</code> widgets you can</para>

        <itemizedlist>
          <listitem>
            <para>present data in tabular format</para>
          </listitem>

          <listitem>
            <para>allow the user to make row selections</para>
          </listitem>

          <listitem>
            <para>allow the user to edit the data directly inside the
            table</para>
          </listitem>
        </itemizedlist>

        <para>According to the paradigms of the MVC pattern this component
        explicitly separates the contained data from the controlling logic.
        <code>STable</code> contains two model objects holding the data: The
        Swing compatible <code>TableModel</code> is the provider of the
        presented table data while a <code>SListSelectionModel</code> object
        holds the current selection status.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/table_example.png" />
          </imageobject>
        </mediaobject>

        <para>But let's start step by step</para>

        <sect3>
          <title>Presenting data using a table model</title>

          <para>Before you can present a table of data you first have to
          create a data provider for the table data. The used
          <code>TableModel</code> data model is actually the one declared by
          Swing, so the Swing tutorial might give you additional hints about
          implementing and using a table model.</para>

          <para>In the example below we just create a very simple table model
          showing just a list of names hard coded in a static array. In
          typical real-life table models you would probably implement table
          models which operate on a list of objects and implement the
          <code>getValueAt()</code> in that way that it retrieves the
          according object from this list and returns an according object
          property value depending on the column.</para>

          <programlisting>// a very simple table model implementation
private static class MyTableModel extends AbstractTableModel {
    private final String[] COLUMN_NAMES = new String[]
            {"First name", "Last name", "Male"};
    private final Object[][] DATA = new Object[][] {
            new Object[] {"Michael","Bolton",Boolean.TRUE},
            new Object[] {"Samantha","Fox",Boolean.FALSE},
            new Object[] {"Eric","Clapton",Boolean.TRUE},
            new Object[] {"David","Bowie",null}
    };
    public int getRowCount() {
        return DATA.length;
    }

    public int getColumnCount() {
        return 3;
    }

    public String getColumnName(int i) {
        return COLUMN_NAMES[i];
    }

    public Object getValueAt(int row, int column) {
        return DATA[row][column];
    }
}

// .... in the main code

  // create new table instance and add to visible container
  final STable table = new STable(new MyTableModel());
  form.add(table);</programlisting>

          <para>Below you'll find a screenshot of the resulting visual
          representation</para>

          <screenshot>
            <screeninfo>A very simply <code>STable</code> instance with the
            default wingS styling</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/table1.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect3>

        <sect3>
          <title>Use the selection model</title>

          <para>Having shown a list of data to the object we might want to
          allow the user to do some operations on the data show. In the first
          step we'll allow the user to select single rows and offer him
          operations on them like e.g. deletion. Modifying the table to accept
          row selections is just as simple as</para>

          <programlisting>// allow single-line selection in table
table.setSelectionMode(STable.SINGLE_SELECTION);</programlisting>

          <para>After this statement you can select rows just by clicking the
          numbers in the first column. Now we also add a delete button and a
          status label telling us about the this event</para>

          <programlisting>// create a status label and a delete button
final SLabel statusLabel = new SLabel();
final SButton deleteButton = new SButton("Delete selected row");
deleteButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent actionEvent) {
        statusLabel.setText("Currently selected row: "+table.getSelectedRow());
        // business logic for operation
    }
});
// add them
form.add(statusLabel);
form.add(deleteButton);</programlisting>

          <para>So each time we click on the new presented delete button a
          status label will be updated telling us the index of the currently
          selected row. If no row has been selected then we will receive -1 as
          value. As well as single row selections, tables can also allow
          selection of continuous intervals
          (<code>STable.SINGLE_INTERVAL_SELECTION</code>) or discontinuous
          intervals (<code>STable.MULTIPLE_INTERVAL_SELECTION</code>).
          According to Swing the <code>SListSelectionModel</code> allows you
          to retrieve the necessary information about the selected rows via
          <code>getMin/MaxSelectionIndex()</code> methods for the continuous
          case, and an <code>isSelectedIndex(int rownum)</code> for the
          discontinuous case.</para>

          <screenshot>
            <screeninfo>Enhanced table allowing single row
            selections</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/table2.png" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <bridgehead>The comfortable way: Get notified about
          selections</bridgehead>

          <para>Besides explicitly asking the table's selection model about
          the current selected rows, we can also use a
          <code>ListSelectionListener</code> to get notified via explicits
          events when the selection changes. The code below will update the
          status label every time the selection changes.</para>

          <programlisting>table.addSelectionListener(new ListSelectionListener() {
     public void valueChanged(ListSelectionEvent listSelectionEvent) {
           statusLabel.setText("Selection changed to: "+table.getSelectedRow());
     }
});</programlisting>
        </sect3>

        <sect3>
          <title>Allow editing of table data</title>

          <para>But now we want allow the user to be able to edit the table
          content. This is quite easy in our simple demo. We have to modify
          the implementation of the table model so that it tells the table
          which cells are editable. In our case we just allow all cells to be
          editable. Furthermore we must overwrite the empty default
          implementation of the <code>setValueAt()</code> method in
          <code>AbstractTableModel</code> to accept and store the changed
          data. Last but not least the <code>getColumnClass()</code> returns
          the class type of the column values so that the framework knows to
          choose the right cell editor for the value type. Adding the few
          lines below to <code>MyTableModel</code> do this job</para>

          <programlisting>public boolean isCellEditable(int row, int column) {
    return true; // allow for all cells
}

public void setValueAt(Object object, int row, int column) {
    DATA[row][column] = object; // just take the canged value
}

public Class getColumnClass(int column) {
    return column == 2 ? Boolean.class : String.class;
}</programlisting>

          <para>And below you see the final outcome of our efforts</para>

          <screenshot>
            <screeninfo>Editable table</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/table3.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </sect3>

        <sect3>
          <title>Customizing STable</title>

          <para>Until now the creation of our table was really painless. As we
          did not override them, the table uses the default cell renderer and
          editors for rendering the cell contents and providing the
          appropriate components for editing a cell value. In our simple case
          this is absolutely fine as we have very simple data types.</para>

          <sect4>
            <title>Custom table cell renderer</title>

            <para>But look at the last column. Wouldn't it be better to
            display this boolean value as checkable check box instead of the
            <code>toString()</code> representation of the boolean values? This
            can be easily achieved by overwriting the default cell renderer to
            return a accordingly checked <code>SCheckBox</code> instead of the
            default creating cell renderer implementation which just renders a
            <code>SLabel</code> with the cell content <code>toString()</code>
            value.</para>

            <programlisting>private static class MyCellRenderer extends SDefaultTableCellRenderer {
    private final SCheckBox checkBox = new SCheckBox();

    public MyCellRenderer() {
        // set icon to indicate editable, empty cells
        setEditIcon(getSession().getCGManager().getIcon("TableCG.editIcon"));
        // render always as graphic icon
        checkBox.setShowAsFormComponent(false);
    }

    public SComponent getTableCellRendererComponent(
            STable table, Object value, boolean selected, int row, int col) {
        if (value instanceof Boolean &amp;&amp; row != -1) {
            checkBox.setSelected(((Boolean)value).booleanValue());
            return checkBox;
        }
        else
            return super.getTableCellRendererComponent(table, value, selected, row, col);
    }
}</programlisting>

            <para>After implementing our own, extended table cell renderer we
            just have to assign it to our table and we're done.</para>

            <programlisting>table.setDefaultRenderer(new MyCellRenderer());</programlisting>

            <para>See the result</para>

            <screenshot>
              <screeninfo>Enhanced cell render for boolean values</screeninfo>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/table4.png" />
                </imageobject>
              </mediaobject>
            </screenshot>

              <para>Beware that the checkbox is readonly. Clicking it will not update
              the table model. Making cells editable is the job of a cell editor.
              Look at the wingSet Table example and XTable example to learn more
              about editable tables.</para>
          </sect4>

          <sect4>
            <title>Customizing the table</title>

            <para>Further customization can be applied to tables. Many tables
            contain a large count of data rows which result in large table
            size. In this case it is a good idea to make the table <emphasis
            role="bold">scrollable</emphasis>. Please refer to <xref
            linkend="scrollpane" /> for details how this can be done.</para>

            <para>As already demonstrated the cell renderers can be exchanged
            as a whole or for specific column classes. If necessary you can
            <emphasis role="bold">exchange the cell editors</emphasis> in the
            same way as demonstrated for the cell renderers.</para>

            <para>STable also allows to exchange the renderer component for
            the <emphasis role="bold">header cells</emphasis> as well to turn
            the display of the header cell.</para>

            <para>The <emphasis role="bold">visibility</emphasis> of the
            <emphasis role="bold">horizontal and vertical separator
            lines</emphasis> can be easily modified using the
            <code>setShowHorizontalLines()</code> and
            <code>setShowVerticalLines()</code> methods of
            <code>STable</code>.</para>

            <para>The <emphasis role="bold">spacing</emphasis> and <emphasis
            role="bold">padding</emphasis> between the table cells can be
            modified with the <code>setIntercellPadding()</code> and
            <code>setIntercellSpacing()</code> methods.</para>

            <bridgehead>Colouring</bridgehead>

            <para>Extensive adjusting of the table colours is possible. The
            recommended way is to add a custom static CSS style overwriting
            the wingS default styles for tables. Look at <xref
            linkend="css-styles" /> for details. As alternative there exists
            also the convenient possibility to all the styling via the Java
            API and the CSS Pseudo selector objects provided by
            <code>STable</code>. Just look at the example below</para>

            <programlisting>// Really fancy and colourful table
table.setAttribute(STable.SELECTOR_HEADER, CSSProperty.BACKGROUND, Color.blue);
table.setAttribute(STable.SELECTOR_NUMBERING_COLUMN, CSSProperty.BACKGROUND, Color.gray);
table.setAttribute(STable.SELECTOR_ODD_ROWS, CSSProperty.BACKGROUND, Color.orange);
table.setAttribute(STable.SELECTOR_EVEN_ROWS, CSSProperty.BACKGROUND, Color.magenta);
// Special marking as !important necessary due to existing !imporant declaration
// in wingS default styles. Might be obsolete already
table.setAttribute(STable.SELECTOR_SELECTION, CSSProperty.BACKGROUND,
        CSSStyleSheet.getAttribute(Color.yellow)+ " !important");</programlisting>

            <para>... and here is the result</para>

            <screenshot>
              <screeninfo>Fancy styled table using CSS pseudo
              selector</screeninfo>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/table5.png" />
                </imageobject>
              </mediaobject>
            </screenshot>
          </sect4>
        </sect3>
      </sect2>

      <sect2>
        <title>STree</title>

        <para>The <code>STree</code> component is a visual explorer-like
        component with expandable nodes. In many aspects it is very similar to
        tables with <code>STable</code>, so this section will give only a very
        quick and short presentation of the <code>STree</code> component.
        Beginners might first read <xref linkend="stable" /> to read a more
        verbose introduction of an advanced wingS components. Furthermore the
        Swing documentation and tutorials of <code>JTree</code> might also be
        a good supplementary starting point for newbies.</para>

        <sect3>
          <title>TreeModel</title>

          <para>Similarly to the <code>STable</code> component, the
          <code>STree</code> component stores its data in a separate model.
          Therefore it uses the Swing <code>TreeModel</code> for retrieving
          the data presented in the tree and a
          <code>STreeSelectionModel</code> object to store the currently
          selected items.</para>

          <para><code>TreeModel</code> is an interface of Swing declaring
          methods to retrieve a root object of a logical tree of objects, as
          well as methods to retrieve the child objects of these node objects.
          Typical node objects are instances of the <code>TreeNode</code>
          interface. In most cases you'll just deal with the default
          implementations of these interfaces provided by Swing:
          <code>DefaultTreeModel</code> and
          <code>DefaultMutableTreeNode.</code></para>

          <para>So let's look at a very simple example tree model constructed
          using these default implementations:</para>

          <programlisting>// Create a root node
DefaultMutableTreeNode root = new DefaultMutableTreeNode("STree");
DefaultMutableTreeNode parent;

// Add first child node with more sub nodes
parent = new DefaultMutableTreeNode("colors");
root.add(parent);
parent.add(new DefaultMutableTreeNode("blue"));
parent.add(new DefaultMutableTreeNode("violet"));
parent.add(new DefaultMutableTreeNode("red"));
parent.add(new DefaultMutableTreeNode("yellow"));

// ... second child node ...
parent = new DefaultMutableTreeNode("sports");
root.add(parent);
parent.add(new DefaultMutableTreeNode("basketball"));
parent.add(new DefaultMutableTreeNode("soccer"));
parent.add(new DefaultMutableTreeNode("football"));
parent.add(new DefaultMutableTreeNode("hockey"));

// ... and third and last root child node
parent = new DefaultMutableTreeNode("food");
root.add(parent);
parent.add(new DefaultMutableTreeNode("hot dogs"));
parent.add(new DefaultMutableTreeNode("pizza"));
parent.add(new DefaultMutableTreeNode("ravioli"));
parent.add(new DefaultMutableTreeNode("bananas"));</programlisting>

          <para>Note that in this example we used simple <code>String</code>
          object as data model objects for each node. But you can use any
          custom object type as data model objects but you should ensure that
          the used <code>STreeCellRenderer</code> is capable of rendering them
          nicely.</para>

          <para>With creation of our tree model much is already done. Just
          wrap this tree model in a new instance of a <code>STree</code>
          component, and you receive an expandable visual tree with selectable
          nodes.</para>

          <programlisting>STree tree = new STree(treeModel);
form.add(tree);</programlisting>

          <screenshot>
            <screeninfo>Simple STree and tree mode</screeninfo>

            <mediaobject>
              <imageobject>
                <imagedata fileref="images/tree1.png" />
              </imageobject>
            </mediaobject>
          </screenshot>

          <sect4>
            <title>React on interaction with the tree</title>

            <para>Equivalent to the table case, the <code>STree</code>
            component also allows you to register listeners to get notified
            about selecting items (<code>TreeSelectionListener</code>), nodes
            that are requested to expand (<code>TreeWillExpandListener</code>)
            and rows that are expanding (<code>TreeExpansionListener</code>).
            The expansion notification event could for example be used to
            lazily load the children from the backend system. The code example
            belows demonstrates a very simple selection listener which will
            update a label every time the selection changed</para>

            <programlisting>final SLabel treeEvent = new SLabel();
form.add(treeEvent);
tree.addTreeSelectionListener(new TreeSelectionListener() {
    public void valueChanged(TreeSelectionEvent treeSelectionEvent) {
        TreePath path = treeSelectionEvent.getPath();
        String action = treeSelectionEvent.isAddedPath() ? "Added " : "Removed ";
        treeEvent.setText(action + path.getLastPathComponent().toString());
    }
});</programlisting>

            <para>By the way: You can also change the selection and expansion
            state of the tree programatically by calling the
            <code>addSelectionPath()</code>, <code>removeSelectionPath(),
            expandRow</code>() and <code>collapseRow()</code> methods. These
            methods expect <code>TreePath</code> objects which describe the
            full node path to the node to select.</para>
          </sect4>

          <sect4>
            <title>Customization of trees</title>

            <para>A <code>STreeCellRenderer</code> is used to render the
            values of the tree nodes into the displayed representation. If you
            decide to choose other data model object this is the place where
            customization is needed.</para>

            <para>Furthermore trees implement the <code>Scrollable</code>
            interface and therefore can be wrapped into
            <code>SScrollPane</code> as described in <xref
            linkend="scrollpane" />.</para>

            <para>The indentation width of the tree nodes, the graphics used
            to indicate the node state (open, closed, etc.) and the selection
            mode are configurable via the API, too. Please refer to the
            JavaDoc and the WingSet demo for more details.</para>
          </sect4>
        </sect3>
      </sect2>

      <sect2>
        <title id="scrollpane">SScrollPane</title>

        <para>The <code>SScrollPane</code> is special container which allows
        you to display viewports of <code>Scrollable</code> components. Namely
        <code>Scrollable</code> is implemented by</para>

        <itemizedlist>
          <listitem>
            <para><code>STable</code></para>
          </listitem>

          <listitem>
            <para><code>STree</code></para>
          </listitem>

          <listitem>
            <para>and <code>SList</code></para>
          </listitem>
        </itemizedlist>

        <para>A <code>SScrollPane</code> accepts instances of these
        <code>Scrollable</code> and provides default horizontal and vertical
        adjustables. By default the scroll pane will use a viewport of 10x10
        units. In the case of a table this would mean that you will see
        maximum 10 rows and 10 columns of the table at once. If the table has
        more rows or columns the according adjustables will provide the
        possibility to move the viewport inside the overall range of the
        table's columns and rows.</para>

        <para>In the following example we'll take the demo table as described
        in <xref linkend="stable" />. So - in the simplest case you can make a
        <code>Scrollable</code> scrollable if you wrap it inside a
        <code>SScrollPane</code> instead of directly adding it to a container.
        The modified code from the table example looks like this</para>

        <programlisting>// create new table instance and add to visible container
final STable table = new STable(new MyTableModel());
//  form.add(table);
form.add(new SScrollPane(table)); // wrap in a scrollpane</programlisting>

        <para>This results in a presentation of the table as shown in the
        following screenshot</para>

        <screenshot>
          <screeninfo>A <code>STable</code> wrapped in a default
          <code>SScrollPane</code></screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/scrollpane1.png" />
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>That's all!</para>

        <para>Extensive customization can be done on the
        <code>SScrollPane</code> and its corresponding
        <code>SAdjustable</code>. Below we present a short summary of the
        relevant properties and their function</para>

        <table>
          <title>Overview of customizable properties for scrolling
          feature</title>

          <tgroup cols="2">
            <colspec colname="col1" colwidth="1*" />

            <colspec colname="col2" colwidth="2*" />

            <thead>
              <row>
                <entry>Property</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry nameend="col2" namest="col1"><code>SScrollPane</code>
                properties</entry>
              </row>

              <row>
                <entry><code>verticalScrollBar</code> /
                <code>horizontalScrollBar</code></entry>

                <entry>The instance horizontal / vertical scrollbar. By
                default semi-graphical <code>SScrollBar</code> but can be also
                the available <code>SPageScroller</code> or
                <code>null</code>.</entry>
              </row>

              <row>
                <entry><code>horizontalExtent</code> /
                <code>verticalExtent</code></entry>

                <entry>The horizontal / vertical extent describes the size of
                the view port in number of 'units' (table cells, list
                elements) which can be seen at once.</entry>
              </row>

              <row>
                <entry><code>horizontalScrollBarPolicy</code> /
                <code>verticalScrollBarPolicy</code></entry>

                <entry>Allows to modify the visibility of the scrollbars. Can
                be defined to be always visible, only if necessary or
                never.</entry>
              </row>

                <row>
                  <entry><code>mode</code></entry>

                  <entry>Sets the scroll mode. See below for supported options.</entry>
                </row>

              <row>
                <entry nameend="col2" namest="col1"><code>SAdjustable</code>
                properties</entry>
              </row>

              <row>
                <entry><code>layoutMode</code></entry>

                <entry>Defines if this adjustable is layouted as a horizontal
                or vertical adjustable</entry>
              </row>

              <row>
                <entry><code>directPageClickables</code></entry>

                <entry>Property for page scroller</entry>
              </row>

              <row>
                <entry><code>unitIncrement</code></entry>

                <entry>Returns the amount to change the scrollbar's value by,
                given a unit up/down request</entry>
              </row>

              <row>
                <entry><code>blockIncrement</code></entry>

                <entry>Returns the amount to change the scrollbar's value by,
                given a block (usually "page") up/down request</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

          <para>The scrollpane distinguishes three different scroll modes:</para>

            <table frame="topbot" pgwide="0">
              <title>Scroll modes</title>

              <tgroup cols="3">
                <colspec colwidth="1*" />

                <colspec colwidth="2*" />

                <thead>
                  <row>
                    <entry>Mode</entry>

                    <entry>Behaviour</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>COMPLETE</entry>

                    <entry>The whole scrollable viewport of the scrollable is rendered.
                    Give it a preferred size! It will be rendered as a scrollable div
                    (overflow: auto), that requires a defined size.</entry>
                  </row>

                  <row>
                    <entry>SCROLLING</entry>

                    <entry>Only the portion defined by the extents will be rendered. The
                    scrollbar's extent spans exactly the scrollable's scrollable viewport.
                    Use it in combination with the standard <code>SScrollBar</code>.</entry>
                  </row>
                    <row>
                      <entry>PAGING</entry>

                      <entry>Only the portion defined by the extents will be rendered. The
                      scrollbar's extent is the first multiple of the respective scrollpane extent,
                      that covers the scrollable viewport. Use it in combination with the
                      <code>SPageScroller</code>.</entry>
                    </row>
                </tbody>

            </tgroup>
          </table>

        <para>Using these properties we know how to modify our scroller in the
        previous example to achieve a paged view as i.e. known from popular
        search engines or other websites.</para>

        <programlisting>SScrollPane scrollPane = new SScrollPane(table);
SPageScroller pageScroller = new SPageScroller(SPageScroller.VERTICAL);
pageScroller.setLayoutMode(SPageScroller.HORIZONTAL);
scrollPane.setHorizontalScrollBar(pageScroller);
scrollPane.setVerticalScrollBar(null);
scrollPane.setMode(SScrollPane.PAGING);
pageScroller.setExtent(5);
form.add(scrollPane);</programlisting>

        <screenshot>
          <screeninfo>Paged example of a scrolling table</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/scrollpane2.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect2>

      <sect2>
        <title>SMenu and SMenuBar</title>

        <para><remark>TODO</remark></para>

        <para>Please refer to the WingSet demo an the following section for
        hints about using desktop like menus.</para>
      </sect2>

      <sect2>
        <title>Component context menu</title>

        <para>A component context can be attached to any component. It will
        appear on right-clicking a component inside a browser. To react on the
        presented menu items a event listener can be attached to each menu
        item. See example code below</para>

        <programlisting>final SLabel testLabel = new SLabel("This label has a context menu.");
ActionListener menuItemListener = new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        String selecteMenu = ((SMenuItem) e.getSource()).getText();
        testLabel.setText("This label has a context menu. You selected " + selecteMenu);
    }
};
SPopupMenu menu = new SPopupMenu();
SMenuItem cutMenu = new SMenuItem("Cut");
cutMenu.addActionListener(menuItemListener);
menu.add(cutMenu);
SMenuItem copyMenu = new SMenuItem("Copy");
copyMenu.addActionListener(menuItemListener);
menu.add(copyMenu);
SMenuItem pasteMenu = new SMenuItem("Paste");
pasteMenu.addActionListener(menuItemListener);
menu.add(pasteMenu);

SMenu subMenu = new SMenu("Help");
SMenuItem about = new SMenuItem("About");
about.addActionListener(menuItemListener);
subMenu.add(about);
SMenuItem topics = new SMenuItem("Topics");
topics.addActionListener(menuItemListener);
subMenu.add(topics);
menu.add(subMenu);

testLabel.setComponentPopupMenu(menu);

form.add(testLabel);</programlisting>

        <screenshot>
          <screeninfo>Component context menu in action</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/context_menu.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect2>
    </sect1>

    <sect1>
      <title>Further events</title>

      <para>The previous sections already demonstrated in depth some sample
      events fired by the presented wingS components and how you can use
      custom implemented event listeners to react to these events. The table
      below points out a few more listener interfaces provided by wingS</para>

      <table>
        <title>Selection of listener interfaces provided by wingS</title>

        <tgroup cols="3">
          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="3*" />

          <thead>
            <row>
              <entry>Listener</entry>

              <entry>Provider</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>SRenderListener</code></entry>

              <entry><code>SComponent</code></entry>

              <entry>This listener will receive events before starting and
              after finishing the rendering of a component</entry>
            </row>

            <row>
              <entry><code>SRequestListener</code></entry>

              <entry><code>Session</code></entry>

              <entry>Receives notifications about the different phases during
              the HTTP request processing of wingS. Refer to
              <code>SRequestEvent</code> for a documented list of these
              different phases.</entry>
            </row>

            <row>
              <entry><code>SParentFrameListener</code></entry>

              <entry><code>SComponent</code></entry>

              <entry>Receives events on adding and removing a component from a
              parent container. Use this if you need to modify or initialize
              things depending on the owning container, as the container is
              not set during construction time of a component.</entry>
            </row>

            <row>
              <entry><code>SContainerListener</code></entry>

              <entry><code>SContainer</code></entry>

              <entry>Receive events on every component added or removed from a
              container</entry>
            </row>

            <row>
              <entry><code>SComponentListener</code></entry>

              <entry><code>SComponent</code></entry>

              <entry>To be notified about changed visibility of a component
              via <code>setVisible()</code> method calls</entry>
            </row>

            <row>
              <entry><code>SDocumentListener</code></entry>

              <entry><code>STextComponent</code></entry>

              <entry>Listener provided by text areas and input fields
              notifying about changes in the underlying 'document' which can
              be retrieved via the <code>getText()</code> method.</entry>
            </row>

            <row>
              <entry><code>SExitListener</code></entry>

              <entry><code>Session</code></entry>

              <entry>Listener to get notified on programatically destroying of
              the wingS user session. If this session exit is initiated by
              calling the <code>Session.setExitAddress()</code> method you can
              throw a veto exception to abort the session destroy (i.e. to
              prompt for unsaved values).</entry>
            </row>

            <row>
              <entry><code>SInternalFrameListener</code></entry>

              <entry><code>SInternalFrame</code></entry>

              <entry>Listener for receiving events on opening, closing,
              iconinfying, deiconifying, minimizing and maximizing of internal
              frames (windows)</entry>
            </row>

            <row>
              <entry><code>SComponentDropListener</code></entry>

              <entry><code>DragAndDropManager</code></entry>

              <entry>Listener to get notified about <code>DragSource</code>
              objects dropped to a <code>DragTarget</code></entry>
            </row>

            <row>
              <entry><code>SInvalidLowLevelEventListener</code></entry>

              <entry><code>SFrame</code></entry>

              <entry>Events listener that gets notified about outdated request
              (mainly due to browser back navigation or double clicks). Used
              for back button detection and handling logic.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1>
      <title id="LayoutManager">Layout Managers</title>

      <para>As mentioned already in section <xref
      linkend="view-logic-separation" /> the layout managers are the
      components responsible for arranging and layouting your wingS widgets
      components on the screen. Therefore the container components like
      <code>SPanel</code> declare a <code>setLayoutManager()</code> method
      accepting instances of <code>SLayoutManager</code>. Container components
      can be nested into each other, so even very complex application layouts
      can be easily assembled using the simpler layout managers.</para>

      <para>wingS ships with two main classes of layout managers: the static
      <code>STemplateLayout</code> and a set of dynamic layout managers
      similar to those present in Swing.</para>

      <para>The static <code>STemplateLayout</code> uses a HTML template file
      as layout source, inside which you declare fixed and named positions for
      your components to arrange. So this layout is the best choice if you
      have exact notions how the resulting HTML for this container should look
      like. Hence this layout manager is typically used to implement the main
      screen layout of your web application arranging the main components like
      the menu bar, working area or notification elements in an template
      reflecting your corporate website design.</para>

      <para>The set of powerful dynamic layout managers arrange the contained
      components by various patterns. Their advantage is their capability to
      handle an arbitrary number of components without the need to know and
      declare the resulting layout positions already during development
      time.</para>

      <para>If using relative preferred sizes, please understand, how layout
      calculations are performed in the browser. If you give an element 100% width
      or height, this is 100% of the <emphasis>available</emphasis> space. A
      typical desktop layout, that spans the whole browser window requires, that
      all containers, starting from the frame's content pane, have a preferred size
      of <code>SDimension.FULLAREA</code>.
      </para>

      <sect2 id="SwingLayoutManager">
        <title>Swing-like Layout Managers</title>

        <sect3>
          <title>SBorderLayout</title>

          <para>The border layout is quite similar to the Swing version of the
          border layout. Contrary to the other dynamic layout managers, it
          offers only a limited number of five layout positions which can be
          used to place exactly one component in each. These positions are
          named <firstterm>North, South, East, West</firstterm> and
          <firstterm>Center</firstterm> and must be specified as layout
          constraints on adding components to a border layout.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/borderlayout.png" />
            </imageobject>
          </mediaobject>

          <para>The border layout tries to take up the full space of the
          surrounding container component if the owning container has no
          preferred size defined. As in Swing the Center position is preferred
          in taking up remaining space, while East and West try to be as
          narrow, North and South as flat as possible.</para>

          <para>The implementation of the border layout tries to achieve the
          desired layout using an invisible HTML table. Optionally you can
          define horizontal or vertical spacings between the different
          sections. Find a commented example usage in the code snippet
          below</para>

          <programlisting>// Example usage of a border layout
SBorderLayout borderLayout = new SBorderLayout();
SPanel borderLayoutPanel = new SPanel(borderLayout);
borderLayoutPanel.add(new SLabel("Center"), SBorderLayout.CENTER);
borderLayoutPanel.add(new SLabel("Top"), SBorderLayout.NORTH);
// add a right-aligned component in the EAST section
SLabel rightLabel = new SLabel("Right");
rightLabel.setHorizontalAlignment(SConstants.RIGHT_ALIGN);
borderLayoutPanel.add(rightLabel, SBorderLayout.EAST);

// Demonstration of additional capabilities of SBorderLayout:
//  o Define horizontal/vertical spacings
borderLayout.setHgap(10); // pixels
//  o Draw borders around sections. Invisible by default
borderLayout.setBorder(1); // pixels</programlisting>
        </sect3>

        <sect3>
          <title>SBoxLayout</title>

          <para>The box layout it a very simple layout allowing to take an
          arbitrary number of components. It simply arranges the contained
          components either in a row or in a column. Similar to the border
          layout this is achieved using an invisible HTML table, so a
          horizontal/vertical spacing can be optionally defined as well as the
          option to draw a border around the different boxes.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/boxlayout.png" />
            </imageobject>
          </mediaobject>

          <para>The box layout does not wrap in either horizontal or vertical
          direction. If you want your components to wrap to the next line if
          the space is not sufficient you might take a look at <xref
          linkend="flowlayouts" />. Here is a short code snippet to
          demonstrate the usage of the box layout in wingS</para>

          <programlisting>// Align components in a line
SBoxLayout horizontalLayout = new SBoxLayout(SBoxLayout.HORIZONTAL);
horizontalLayout.setHgap(10); // spacing of 10px between components
horizontalLayout.setBorder(1); // show borders around boxes
SPanel panel1 = new SPanel(horizontalLayout);
panel1.add(new SLabel("Horizontal box layout with padding &amp; border"));
panel.add(new SLabel("Next column"));

// Very simple default usage
SPanel panel2 = new SPanel(new SBoxLayout(SBoxLayout.VERTICAL));
panel2.add(new SLabel("Component 1"));
panel2.add(new SLabel("Component 2"));</programlisting>
        </sect3>

        <sect3>
          <title>SGridLayout</title>

          <para>The grid layout is some sort of a combined vertical and
          horizontal box layout. It takes a column count as argument in the
          constructor and will line break when the maximum column count has
          been reached.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/gridlayout.png" />
            </imageobject>
          </mediaobject>

          <para>Similar to the preceding layout it is implemented using an
          invisible layout table. Border and spacing can be defined in the
          same manner as demonstrated before.</para>

          <programlisting>// A 3-columned grid layout
SPanel gridPanel = new SPanel(new SBoxLayout(SBoxLayout.VERTICAL));
gridPanel.add(new SLabel("Component 1"));
gridPanel.add(new SLabel("Component 2"));
gridPanel.add(new SLabel("Component 3"));
gridPanel.add(new SLabel("Component 4"));
// ...</programlisting>

          <para>A special property <code>renderFirstLineAsHeader</code> allows
          you to render the first line of the invisible HTML table with
          <code>&lt;TH&gt;</code> elements versus the default
          <code>&lt;TD&gt;</code> elements. This might be useful if you want
          to apply special CSS styles to the first row in these
          layouts.</para>
        </sect3>

        <sect3>
          <title id="flowlayouts">SFlowLayout and SFlowDownLayout</title>

          <para>The flow layout come in the two flavours of
          <code>SFlowLayout</code> and <code>SFlowDownLayout</code>. Due to
          browser limitations <code>SFlowDownLayout</code> is in wingS
          actually semantically the same as a vertical box layout (we can't
          flow vertically in web browsers). But the <code>SFlowLayout</code>
          might be an interesting alternative to your for a horizontal box
          layout if you don't know the horizontal space available to a
          container but nevertheless want to utilise it as best as possible
          without imposing horizontal scrollbars if the components don't fit
          in a row.</para>

          <para>Actually the flow layout advises the browser to flow every of
          its contained components. This means that the browser should start a
          new row if a component doesn't fit into the previous row anymore.
          Just look at the WingSet demo section Dynamic Layouts. Choose
          SFlowLayout in the drop down box and look how the layouted
          components behave on resizing your browser window.</para>

          <para>The usage is as simple as it could be</para>

          <programlisting>// A horizontal flowing layout
SPanel flowPanel = new SPanel(new SFlowLayout());
flowPanel.add(new SLabel("Component 1"));
flowPanel.add(new SLabel("Component 2"));
flowPanel.add(new SLabel("Component 3"));
// ...</programlisting>

          <para>The flow layout follows the alignment of the previous layout
          for horizontal and vertical spacing. Hence you can also apply a
          horizontal alignment to the layout. Why this? Actually the flow
          layout only takes up the width it requires. So the horizontal
          alignment of components affects the alignment inside this taken up
          width. In contrast the alignment defined in the flow layout instance
          itself affects the horizontal alignment of this composite in the
          parent container. Take a look at WingSet if you didn't get it
          already.</para>

          <bridgehead>Caveats</bridgehead>

          <para>Please be aware that this layout might act somewhat
          surprisingly regarding the preferred sized of contained or
          surrounded components, and when in combination with table based
          layouts.</para>

          <para>Suppose you put a component with a preferred size of 100%
          inside a flow layout you'll notice that your components won't flow
          anymore. This is just because in this case the sized component will
          adapt the available width rather than the flow layout being able to
          know that it should use the available space. A similar effect can happen on put a flow layout managed
          container together with other components inside a parent container.
          Some components will take up a minimum width though it may
          visibility not be apparent.</para>

          <para>So just in case you encounter problems with non-flowing flow
          layouts try to play with the preferred sizes of the surrounding or
          contained components as well as the nesting of your containers.
          Advanced users may use the techniques described in <xref
          linkend="live-css-editing" /> together with a peek into the
          generated HTML sources to debug the responsible components or size
          disabling the flowing more effectively.</para>
        </sect3>

        <sect3>
          <title>SGridBagLayout</title>

          <para>The gridbag layout is the most powerful dynamic layout manager
          available in wingS. Similar to <code>SGridLayout</code> the
          <code>SGridBagLayout</code> allows to align components in a tabular
          manner but offers many more options to influence the structure of
          the generated (invisible) layout table. Namely these options
          are</para>

          <itemizedlist>
            <listitem>
              <para>Horizontal and/or vertical joining of selected layout grid
              cells to larger layout grid cells</para>
            </listitem>

            <listitem>
              <para>Adding components with the constraint to take up the
              remaining rows or columns in the layout grid</para>
            </listitem>

            <listitem>
              <para>Specifying weights for the heights and widths of layout
              cells for modifying the relative space taken by the layout grid
              cells</para>
            </listitem>

            <listitem>
              <para>Adding components randomly at specified layout grid
              coordinates</para>
            </listitem>
          </itemizedlist>

          <para>Actually this layout managers can be used in so many different
          ways that we won't describe them in detail but present some
          commented usage examples. Please refer to the WingSet demo or the
          <ulink
          url="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/GridBagLayout.html">
          documentation of the Swing</ulink> variant for an in-depth
          explanation of it usage.</para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/gridbaglayout.png" />
            </imageobject>
          </mediaobject>

          <para>The code below is the code for the first grid in the screen
          shot above</para>

          <programlisting>// Vertical adding using pre-defined gridx
SGridBagLayout layout = new SGridBagLayout();
layout.setBorder(1); // to show grid structure
SPanel gridBagPanel = new SPanel(layout);

GridBagConstraints c = new GridBagConstraints();
c.gridx = 0;
c.gridheight = GridBagConstraints.REMAINDER;
gridBagPanel.add(new SLabel("1"), c);
c.gridheight = 1;

c.gridx = 1;
gridBagPanel.add(new SLabel("2"), c);
c.gridheight = GridBagConstraints.REMAINDER;
gridBagPanel.add(new SLabel("3"), c);
c.gridheight = 1;

c.gridx = 2;
gridBagPanel.add(new SLabel("4"), c);
gridBagPanel.add(new SLabel("5"), c);
c.gridheight = GridBagConstraints.REMAINDER;
gridBagPanel.add(new SLabel("6"), c);
c.gridheight = 1;

c.gridx = 3;
gridBagPanel.add(new SLabel("7"), c);
gridBagPanel.add(new SLabel("8"), c);
gridBagPanel.add(new SLabel("9"), c);
c.gridheight = GridBagConstraints.REMAINDER;
gridBagPanel.add(new SLabel("10"), c);</programlisting>
        </sect3>

        <sect3>
          <title>SCardLayout</title>

          <para>The <code>SCardLayout</code> is again a very simple layout
          manager nearly identical with the according Swing variant
          <code>java.awt.CardLayout</code>. It can be understood as a deck of
          'cards' with exactly one 'card' visible at once. So you just add
          your various components to components to a card layout and from the
          start it will just show the first added one. Using special
          <code>show()</code>, <code>next()</code> and <code>previous()</code>
          methods you can 'flip' to another card during runtime.</para>

          <para>So actually naming this manager a layout manager is somehow
          exaggerated as the only thing it does is to ensure that only
          component in the 'card deck' is visible at one time. Anyhow this
          layout might be useful if you have a set of different dialogue
          components you alternately want to present to the user without the
          need to add and remove them from an empty container. Again you'll
          find for illustrational purpose a few example code lines
          below</para>

          <programlisting>// A card deck layout
SCardLayout cardLayout = new SCardLayout();
SPanel stackedPanel = new SPanel(cardLayout);
SLabel label1 = new SLabel("Component 1");
stackedPanel.add(label1);
stackedPanel.add(new SLabel("Component 2"));
stackedPanel.add(new SLabel("Component 3"), "layoutconstraint3");

// select visible 'card' by passing specific object instance
cardLayout.show(label1);

// ... or select shown card using the layout constraint
cardLayout.show("layoutconstraint3");

// or flip to next, previous, first or last card
cardLayout.next(stackedPanel);
cardLayout.previous(stackedPanel);
cardLayout.first(stackedPanel);
cardLayout.last(stackedPanel);
</programlisting>
        </sect3>
      </sect2>

      <sect2 id="STemplateLayout">
        <title>STemplateLayout</title>

        <para>Contrary to the other layout managers the STemplateLayout is a
        static layout manager. Like any other layout manager it allows to
        place arbitrary elements, but you can write a simple HTML-page being
        the template for your container component. Though we encourage the use
        of the dynamic layout managers, this layout manager can be very useful
        in realising the main page layout of your web application.</para>

        <para>To use this layout manager you have to define a template file
        required by the STemplateLayout instance. Inside this template file
        you can insert inside your custom HTML code desired wingS objects
        using tags like <code>&lt;input name="compname"&gt;</code> or
        <code>&lt;object name="compname"&gt;&lt;/object&gt;</code></para>

        <para>The name attribute of these <code>input</code> or
        <code>object</code> tag is the name you have to use as layout
        constraint when you add the desired component to the template layout
        managed SContainer: <code>panel.add(new SLabel("a test label),
        "compname"));</code></para>

        <para>Sample template file: <programlisting>  &lt;HTML&gt;&lt;BODY&gt;
  Name der Person: &lt;COMPONENT NAME="<emphasis>NAME</emphasis>"&gt;&lt;BR&gt;
  Vorname der Person: &lt;COMPONENT NAME="VORNAME" ICON="vorname.gif"&gt;&lt;BR&gt;
  Wohnort der Person: &lt;COMPONENT NAME="WOHNORT"&gt;&lt;BR&gt;
  &lt;/BODY&gt;&lt;/HTML&gt; </programlisting> According Java sample code:
        <programlisting>  templateContainer.setLayout(new STemplateLayout("templatefile"));
  templateContainer.addComponent(new SLabel("Haaf"), "<emphasis>NAME</emphasis>");
  templateContainer.addComponent(new SButton("Armin"), "VORNAME");
  templateContainer.addComponent(new SLabel("Neu-Ulm"), "WOHNORT"); </programlisting></para>

        <sect3>
          <title id="template-properties">Setting component properties via the
          template</title>

          <para>Besides this simple inlining mechanism the STemplateLayout
          manager has also another very powerful feature - specific components
          bean attributes can be overwritten by specific optional inline
          attributes attached to your <code>object</code> HTML tags e.g.
          <code>&lt;object name="compname" background="#ff0000" text="new
          text"&gt;&lt;/object&gt;</code></para>

          <para>This feature can be very useful if a web developer is solely
          responsible for the whole application Look &amp; Feel. Depending on
          the type of the arranged component they can modify different visual
          properties (background color, display text, etc.) just by modifying
          the template file. For example let us assume you are placing the
          label object from the previous example in your template file. The
          web designer can overwrite the component's background, display text,
          etc. by modifying the object inclusion tag to <code>&lt;object
          name="aConstraintName" background="#ff0000" text="new
          text"&gt;&lt;/object&gt;</code></para>

          <para>Please refer to the JavaDoc of the
          <code>PropertyManager</code> interface and its implementors to find
          out which properties are supported for which classes.</para>
        </sect3>

        <sect3>
          <title>SRootLayout</title>

          <para>Just for the sake of completeness we need to mention
          <code>SRootLayout</code> here. Actually it is a derived variant of
          STemplateLayout which actually expects only one component named
          <code>content</code>. By default it uses a very simple default
          template file <filename> template/default.thtml</filename> which is
          provided in the default libraries with wingS. Use this layout for a
          quickstart of the layout of the root frame of your application if
          you intend to replace it later on with a more complex
          STemplateLayout based layout.</para>
        </sect3>

        <sect3>
          <title>BeanScript support</title>

          <para><xref linkend="template-properties" /> showed you already how
          you can set specific component properties via special attributes on
          the <code>&lt;OBJECT&gt;</code> tag in you template files.
          Additionally you can define Java code fragments in your template
          file. Just add an attribute <code>SCRIPT</code> on the
          <code>OBJECT</code> tag with the desired, arbitrary Java code
          parseable by bean shell<footnote>
              <para>Refer to <ulink url="http://www.beanshell.org/">
              http://www.beanshell.org/</ulink></para>
            </footnote>. For security reasons bean scripting support is
          disabled by default and you have to enable it explicitly by setting
          a property in your web.xml</para>

          <programlisting>        &lt;init-param&gt;
            &lt;param-name&gt;wings.template.beanscript&lt;/param-name&gt;
            &lt;param-value&gt;TRUE&lt;/param-value&gt;
            &lt;description&gt;Enables bean scripting in templates files&lt;/description&gt;
        &lt;/init-param&gt;</programlisting>

          <para>After you enabled it, you can use the <code>SCRIPT</code>
          attribute in your template files on the <code>OBJECT</code> tags.
          The <code>DefaultPropertyManager</code> initializes the bean
          scripting environment with two variables: <code>component</code> is
          the inline wingS <code>SComponent</code> and session holds the
          current wingS <code>Session</code> object. Just look at the example
          template file fragment below</para>

          <programlisting>&lt;object name="theLabel" foreground="#990000"
 script='component.setText("Value set via template: "+new java.util.Date());'&gt;&lt;/object&gt;</programlisting>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="css-styles">
      <title>Styling your application using CSS</title>

      <para>Besides being curious about how to build the presentation logic of
      your application's layout you are probably also very interested in how
      you can influence the look &amp; feel of it. Generally the overall style
      of an wingS application as a whole, as well as that of a single
      component, is the outcome of the following aspects:</para>

      <itemizedlist>
        <listitem>
          <para>The HTML code generated by the renderers of the used Pluggable
          Look &amp; Feel. <abbrev>(PLAF).</abbrev></para>
        </listitem>

        <listitem>
          <para>Static CSS styles applied to this generated HTML code (wingS
          default style sheets extended with your optional application
          specific style sheets)</para>
        </listitem>

        <listitem>
          <para>The dynamic styles defined and applied during runtime by
          modifying visual component properties via Java</para>
        </listitem>
      </itemizedlist>

      <para>In this section we'll explain how these three aspects play
      together and the approaches to realize your custom design
      requirements.</para>

      <bridgehead>The basics of CSS</bridgehead>

      <para>But before digging into the depths of CSS you should assure that
      you have basic knowledge about the following topics.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">CSS</emphasis> in general</para>
        </listitem>

        <listitem>
          <para>Available set of <emphasis role="bold">CSS
          properties</emphasis> and valid values</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Inheritance</emphasis> and <emphasis
          role="bold">cascading</emphasis> of CSS definitions</para>
        </listitem>

        <listitem>
          <para>Addressing elements inside a HTML document using <emphasis
          role="bold">CSS selectors</emphasis></para>
        </listitem>
      </itemizedlist>

      <para>The web offers many valuable resources on this topics so it should
      be easy to learn the required knowledge or better ask a web developer
      you trust for support on creating the required CSS definitions to style
      your application. Beware that the interpretation of CSS, especially the
      support for CSS selectors is very different among browsers!</para>

      <sect2>
        <title>CSS selector scheme inside wingS</title>

        <para>In short Cascading Style Sheets (CSS) allow you to set visual
        property values on addressed elements of a HTML document. The
        cascading effect here is, that if there exists different,
        contradictorily property values for the same document element, then
        the CSS definition which addresses this element in the most specific
        way 'wins'. If this is still ambiguous, then the value which was
        assigned as last one will be the 'winner'. This is important, because
        it explains how you can override the default styles in wingS with your
        own static style sheet as well as why CSS properties defined during
        runtime in wingS are overwriting the static declared ones.</para>

        <para>Okay - the next thing you need to know about are the different
        possibilities to address a specific element in a web page using CSS
        selectors and how these possibilities are utilized inside wingS. In
        CSS you can assign property values to document elements by addressing
        them via CSS selectors referring to</para>

        <itemizedlist>
          <listitem>
            <para>All general HTML language element types</para>
          </listitem>

          <listitem>
            <para>CSS classes assigned to specific elements using the
            <code>class="xyz"</code> attribute</para>
          </listitem>

          <listitem>
            <para>elements reachable only via a specific path</para>
          </listitem>

          <listitem>
            <para>elements with specific <code>id</code> assigned via the
            <code>id</code> attribute</para>
          </listitem>
        </itemizedlist>

        <bridgehead>wingS component CSS addressing</bridgehead>

        <para>If you take a look in the HTML code wingS generates and sends to
        the browser you will notice the following.</para>

        <itemizedlist>
          <listitem>
            <para>Every wingS component is rendered as an independent block of
            HTML code. Containers render themselves using the layout manager,
            which goes through the list of contained components and generates
            the required HTML code to reflect the desired layout</para>
          </listitem>

          <listitem>
            <para>Thus every component has its root element. Typically this
            element wears the <code>id</code> attribute with the component's
            name and a <code>class</code> attribute with the component's
            style. The style defaults to the component's simple class name.</para>
          </listitem>
        </itemizedlist>

        <para>The id and the style class make the component addressable by
        means of CSS rules. You can alter the style property using the
        <code>setStyle()</code> method of <code>SComponent</code>. Please
        be aware that most of the wingS default styles operate on the
        default CSS class, so this will probably have the effect that this
        component loses most of its wingS default styling. If you want to
        keep the default style and just assign additional CSS class, the
        just append your CSS class name to the existing ones separated by
        a space character.</para>

        <para>So below you'll just find a short example HTML fragment of the
        WingSet demo illustrating the described patterns</para>

        <programlisting>
            &lt;table class="SLabel" id="o2"&gt;
                &lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
                    &lt;span style="white-space: nowrap;"&gt;Hello wingS&lt;/span&gt;
                &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
            &lt;/table&gt;
        </programlisting>

        <bridgehead>The CSS cascade in wingS</bridgehead>

        <para>In wingS the effective style sheet cascade is as follows:</para>

        <para>First the wingS default style sheets for the according browser
        is declared in the wingS root frame. They contain declarations based
        on generic HTML attributes (i.e. <code>IMG</code>) as well as on the
        default CSS class names (i.e. <code>SButton).</code></para>

        <para>As next the static style sheets you optionally attached to
        the root frame are declared. As this CSS file is declared as last one,
        your customized value will win by default against equal-prioritized
        declarations from the default style sheet.</para>

        <para>Last, the dynamic styles of the components (<code>setAttribute()</code>
        but also <code>setForground()</code>, <code>setBorder()</code>, etc.) are
        rendered as inline styles in the page. They will override the definitions of
        all attached stylesheets.</para>
      </sect2>

      <sect2>
        <title>Default style sheets</title>

        <para>The default wingS distribution contains different style sheets
        mainly for two browsers: One specialized for the Microsoft Internet
        explorer and one for all standard conform browsers (FireFox,
        Mozilla, Konqueror). The special style sheet for the Microsoft stuff is
        only necessary as IE 6 still lacks on standard functionalities like
        CSS child selectors but on the other side requires really a quite huge
        workaround for all the curious effects it 'features'.</para>

        <para>You can find those default CSS style sheets in the wingS
        <filename>css.jar</filename> library as <filename>
        org/wings/plaf/css/browsername.css</filename>. These default style
        sheets declare the CSS declarations needed for correct operation of
        wingS as well as the values for the wingS default application
        style.</para>

        <para>During session initialization the <code>FrameCG</code>
        determines the browser of the client and attaches the respective style
        sheets.</para>
      </sect2>

      <sect2>
        <title>Borders and the Default Border</title>

        <para>By default, a <code>border.DefaultBorder</code> is applied to
        all components. This special border renders no inline attributes. Thus
        the styles as defined in the stylesheet(s) take effect. If another
        border is set, that border's style attributes are rendered as an inline
        style attribute and override the stylesheet definition. If the border is
        set to <code>null</code>, an inline style with no border and no padding
        is written.</para>
      </sect2>

      <sect2>
        <title>Attaching custom style sheets</title>

        <para>Below you'll find an example of how to register a custom CSS
        style sheet file in your wingS application. In the case shown, the new
        styles are held in a global, static style sheet file. Hence the style
        sheet is added to the main frame to ensure it can apply to all
        components. <programlisting>frame = new SFrame();
frame.addHeader(new Link("stylesheet",
      null, "text/css", null,
      new ClasspathResource("../css/myapp.css", "text/css")));</programlisting></para>

        <para>The style sheet contains various customised styles, in this case
        a custom table header: <programlisting>.STable TH  {
  background-color: #FFCC99
}</programlisting></para>

        <para>Note that all components have a
        <code>SComponent.setStyle()</code> method to override their CSS style
        class (i.e. the name for the CSS class which bundles together their
        display attributes). The individual display attributes are stored in a
        <code>AttributeSet</code> member. See for example
        <code>SComponent.setAttribute</code>().</para>
      </sect2>

      <sect2>
        <title id="live-css-editing">CSS live editing</title>

        <para>This section mentions briefly a very effective way to
        incrementally create custom style sheet files for your applications.
        In <xref linkend="tools" /> we already mentioned the value of the
        FireFox browser and the freely available Web Developer plugin.</para>

        <para>Actually this plugin is a really great help during styling your
        application. After installing it, a new toolbar will appear in your
        browsers. So just visit your current wingS applications and navigate
        to the dialog you want to restyle. Activate "Show CSS style
        information" and your cursor becomes a crosshair. If you click now on
        a specific component, the CSS properties currently applying to this
        component will be shown in a new sidebar windows. So this is the ideal
        way to get a quick impression how the current style is assembled in
        the CSS cascade. Note also the path written in the status bar and the
        bottom of the browser. This can help you to know how a good CSS
        selector could look like.</para>

        <para>Now let's get ready to rumble! Choose "Edit CSS" in the toolbar
        of the Web Develeloper plugin. In your side bar at least two tabs with
        CSS file content will appear. One of those CSS files is the wingS
        default CSS file for the FireFox browser, the other might be empty as
        it contains the dynamically generated CSS styles. Browse through the
        wingS default CSS style sheet file. Try to modify existing CSS
        declarations. You should instantly see the changes on the screen. If
        you already attached a custom CSS style sheet to you application, try
        to do the changes inside that file. Then you can just copy &amp; paste
        those changes into your original sources or even choose to save the
        modified file directly out of the Web Developer plugin.</para>

        <para>Sometimes it may be hard for you to figure out how to achieve
        your desired style. The a look into the generated HTML page sources
        might help. Again FireFox is a valuable tool here for you. Just mark
        the according section in your browser and right-click the mouse. After
        choosing "View source for selection" FireFox extracts and displays you
        only the source of your selected area. This can help vastly to avoid
        long searches for the right places in very complex web layouts.</para>

        <screenshot>
          <screeninfo>Live CSS editing with the FireFox Web Developer
          plugin</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/livecss.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </sect2>
    </sect1>

    <sect1>
      <title>Miscellaneous Topics</title>

      <sect2>
        <title>wingS Session</title>

        <para>The wingS session is the root instance of a user application
        session. Every time you start a new browser or a new client contacts
        the wingS servlet by calling the entry URL of your application, a new
        HTTP session will created and an according wingS session object will
        be bound to it. Refer to <xref linkend="session-management" /> for
        full details about the interaction between a wingS session and the
        servlet container session. The current wingS session can be always
        retrieved using the session manager. Furthermore all
        <code>SComponent</code> offer a convenience method either</para>

        <programlisting>Session session = SessionManager.getSession();
// or
Session sameSession = aComponent.getSession();</programlisting>

        <para>Again - this session is the root of an user application session.
        It means it is holding the root objects for all session specific data.
        Mainly it hold references to the root UI component in the UI object
        hierarchy tree you construct during runtime by constructing new
        components and adding them to containers. This root UI object can be
        retrieved using the <code>getRootFrame()</code> method offered by the
        session object.</para>

        <bridgehead>Storing application data inside the wingS
        session</bridgehead>

        <para>One very important usage of the session object is to hold and
        store application specific data inside a global session context. Think
        i.e. that your application might want to now the current logged in
        user at various time during application runtime. So you would use the
        session to store the user after successful login and use getters to
        retrieve it from the session again. There is a utility class
        <code>SessionLocal</code> for typesafe access to session properties.
        </para>

        <programlisting>static final SessionLocal&lt;String&gt; userid = new SessionLocal&lt;String&gt;();

    // ...
    user.set(SessionManager.getSession().getServletRequest().getUserPrincipal().getName());
    // ...
    String userid = user.get();
    // ...
</programlisting>

        <bridgehead>Further features of the Session</bridgehead>

        <para>The session objects also holds various informations like the
        current used <emphasis role="bold">character encoding</emphasis> for
        the communication with the browser (Default: UTF-8), the current
        session <emphasis role="bold">Locale</emphasis>, informations about
        the <emphasis role="bold">browser</emphasis>, an object
        describing some <emphasis role="bold">session statistics</emphasis>
        like request count and average response time and the current <emphasis
        role="bold">servlet context, HTTP request</emphasis> and <emphasis
        role="bold">HTTP response</emphasis> objects.</para>

        <para>Additionally you can use the session to declare a new URL to
        <emphasis role="bold">redirect the request</emphasis> to or an exit
        URL do <emphasis role="bold">request a vetoable session
        exit</emphasis> with subsequent redirect to a salutation page.</para>

        <para>Please refer to the API docs for details about these
        features.</para>
      </sect2>

      <sect2>
        <title>File Upload</title>

        <para>The problem of mime parsing and multipart decomposition is
        completely hidden from the wingS developer. Including a file upload
        facility in a form is just a matter of adding an SFileChooser
        component to the form.</para>

        <para><programlisting>  SForm form = new SForm();
  final SFileChooser chooser = new SFileChooser();
  SButton button = new SButton("upload");
  form.add(chooser);
  form.add(button);

  button.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent event) {
      File file = chooser.getFile();
      String fileType = chooser.getFileType();
      // ...
    }
  });          </programlisting> Of course there can be multiple file choosers
        per form. You can limit the size of files to be uploaded in order to
        avoid denial-of-service (harddisk, bandwidth) attacks You can modify
        the maximum content length to be posted with the maxContentLength
        property of the Session. This is 64 kByte by default, so you might
        want to change this in your application. Please refer to the JavaDoc
        of the component to learn more about upload related error
        handling.</para>
      </sect2>

      <sect2>
        <title>File Download</title>

        <para>One way of providing a download is implementing your own Servlet
        with the Servlet API directly:</para>

        <para><programlisting>public class XLSServlet extends HttpServlet {

  protected void doGet(HttpServletRequest request,
                       HttpServletResponse response)
      throws ServletException, IOException {

    doPost(request, response);
  }

  protected void doPost(HttpServletRequest request,
                        HttpServletResponse response)
      throws ServletException, IOException {

    HSSFWorkbook sheet = HSSFWorkbook();
    response.setContentType("application/vnd.ms-excel");
    ServletOutputStream out = response.getOutputStream();
    out.write(sheet.toBytes()));
    response.flushBuffer();
  }
} </programlisting></para>

        <para>Another way is to extend a <code>DynamicResource</code> and
        overwrite its write() method.</para>

        <para><programlisting>public final class DynamicPDFDownload extends DynamicResource {

  public void write(Device out) throws IOException {
    DeviceOutputStream stream = new DeviceOutputStream(out);
    writePDF(baseDir, stream);
    stream.flush();
    out.close();
  }
} </programlisting></para>

        <para>Then you can externalize it via the ExternalizeManager.
        <programlisting>Map/*&lt;String,String&gt;*/ headers = new HashMap/*&lt;String,String&gt;*/();
headers.put("Content-Disposition", "attachment; filename=" + getFilename() );
String url = SessionManager.getSession().getExternalizeManager().externalize(pdfDownload, headers);  </programlisting></para>
      </sect2>

      <sect2>
        <title>Overwriteable config files</title>

        <para>The default config files reside inside the jar file. Take a look
        at the jar container to learn what you can do with them. They should
        be documented. If you want to overwrite any of the settings in the
        config files, you can do that by providing a file in the WEB-INF
        directory of your web application. The naming scheme is the following:
        If you want to overwrite some properties from the file at classpath
        <code>org/wings/plaf/css/default.properties</code>, you need to put a
        file named <code>org.wings.plaf.css.default.properties</code> into the
        WEB-INF directory. That file will then be read on top of the default
        file, so you just need to overwrite the settings you want to
        change.</para>

        <para>The files that I know of you can change via this method are:
        <code>org/wings/plaf/css/default.properties</code> and
        <code>org/wings/util/charset.properties.</code></para>
      </sect2>

      <sect2>
        <title>Error Page Display</title>

        <para>By default, if an exception occurs inside a wingS application,
        this error is logged via the logging mechanism. No other action is
        triggered. However, you can provide the user with an error page. For
        this, you need to provide a parameter in your application's web.xml
        file, like this: <programlisting>&lt;init-param&gt;
  &lt;param-name&gt;<emphasis role="bold">wings.error.template</emphasis>&lt;/param-name&gt;
  &lt;param-value&gt;<emphasis role="bold">/templates/ErrorTemplate.thtml</emphasis>&lt;/param-value&gt;
&lt;/init-param&gt;</programlisting></para>

        <para>The value of the parameter is a path to a wingS template
        relative to the directory the web application resides in. In this
        template you can provide the following constraints:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis role="bold">EXCEPTION_MESSAGE</emphasis> -
            replaced with the message of the exception</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">EXCEPTION_STACK_TRACE</emphasis> -
            replaced with the stack trace of the exception</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">WINGS_VERSION</emphasis> - replaced
            with the wingS version and compile time</para>
          </listitem>
        </itemizedlist>

        <para>For an in-use example of this, look at the web.xml and
        ErrorTemplate.thtml files of the WingSet demo.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Best Practices</title>

      <para>Cherish the following principles and wingS projects will be a
      smooth and enjoyable ride.</para>

      <orderedlist>
        <listitem>
          <para>STemplateLayout - Understand how this layout manager works.
          The minimal overhead of using it pays off quickly. Your web designer
          will be able to style your application without touching your Java
          code. Read <xref linkend="STemplateLayout" /> for details.</para>
        </listitem>

        <listitem>
          <para>SRootLayout - Set a <code>SFrame</code> 's layout to a custom
          <code>SRootLayout</code> referencing a template file. The source
          code looks like this. <programlisting>URL url = Thread.currentThread().getContextClassLoader().getResource("layout.thtml");
frame.setLayout(new SRootLayout(url));</programlisting></para>

          <para>Ensure that the template contains the element
          <code>object</code> with attribute <code>content</code> . This
          element will be replaced with the frame's content. <programlisting>&lt;div id="title"&gt;Application Title&lt;/div&gt;
&lt;hr /&gt;
<emphasis role="bold">&lt;object name="content"&gt;&lt;/object&gt;</emphasis>
&lt;hr /&gt;
&lt;div id="footer"&gt;company, copyright, license notice&lt;/div&gt;</programlisting>
          This is a convenient way to define XHTML like a border or title
          appearing on every page, no matter what the content will be
          like.</para>
        </listitem>

        <listitem>
          <para>The total sum of testing cycles quickly justifies the
          investment of learning how to efficiently deploy a web application
          into the servlet container.</para>

          <itemizedlist>
            <listitem>
              <para>If Jakarta Tomcat is your choice, learn how to use the
              so-called "manager". With its predefined ant tasks you can
              install and remove web applications in the wink of an eye
              without the expensive stop and start of the complete Tomcat and
              without writing it into the webapps folder first.</para>
            </listitem>

            <listitem>
              <para>Alternatively, think about just deploying the context.xml
              to webapps folder and pointing its base to your project's build
              folder which then, of course, has to obey the webapps folder
              rules.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Beginning with Tomcat version 5.0 a new default session
          manager was introduced, called
          <code>SimpleTcpReplicationManager</code> (a subclass of
          <code>StandardManager</code> ). It attempts to load the persistence
          storage on application startup and produces a warning-level
          exception looking like this: <programlisting>SEVERE: Exception loading sessions from persistent storage
java.io.WriteAbortedException: writing aborted;
java.io.NotSerializableException:
org.apache.catalina.loader.WebappClassLoader</programlisting> To use the the
          non-clustered session manager use the following section in your web
          application's context definition in /META-INF/context.xml.</para>

          <programlisting>&lt;context&gt;
   &lt;manager
       className="org.apache.catalina.session.StandardManager"
        pathname=""&gt;
   &lt;/manager&gt;
&lt;/context&gt;</programlisting>
        </listitem>

        <listitem>
          <para>Beware of the consequences of using a servlet container.
          Multiple requests can traverse static methods in parallel!</para>
        </listitem>

        <listitem>
          <para>Avoid setting visual features in Java code, instead define CSS
          classes with <code>SComponent.setStyle("xyz")</code>and reference a
          CSS where you determine the rendering with <code>.xyz { &lt;your
          style definitions&gt; }</code>.</para>
        </listitem>

        <listitem>
          <para><remark>TODO</remark>: Explain loading as resource and benefit
          of changing the file at runtime.</para>
        </listitem>
      </orderedlist>
    </sect1>
  </chapter>

  <chapter>
    <title>Advanced Topics</title>

    <sect1>
      <title>Back Button Navigation</title>

      <para>The back button was conceived in the very beginning of the web
      when static content prevailed. Today's web landscape is dramatically
      different. The majority of content is created dynamically and web
      applications bring state and transactions into play.</para>

      <para>As intuitive and helpful back button navigation is using static
      pages, web application developers often wish they could just
      disable<footnote>
          <para>It can not be disabled, but the effect of the back button can
          be mitigated by telling the browser not to cache responses and
          redirecting it to a page containing explanatory information.</para>
        </footnote> it. Yet, we developers have to live with users clicking on
      back whenever they please. And let's face it, putting a message "Do NOT
      click the back button!" is a miserable solution, manifesting the
      incapacity of the applications creator.</para>

      <para>Therefore wingS gives you the power to detect and control the
      behaviour of back button events. The approach relies on our epoch
      checking mechanism. It enables you to handle the browsers back button
      navigation in three different ways: <orderedlist>
          <listitem>
            <para><emphasis role="bold">Default behaviour</emphasis> - ignore
            requests from old views and redisplay just the current view</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Allow back navigation</emphasis> - do
            nothing on back navigation, allow manipulations and clicks on
            hand-selected components</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Back navigation detection</emphasis> -
            advise the browser to reload the page on every back navigation and
            try to detect this event</para>
          </listitem>
        </orderedlist></para>

      <para>Let's take a look at the details in the next three
      sections.</para>

      <sect2>
        <title>Default Behaviour</title>

        <para>This mode is the default and safest way to cope with the browser
        back facility. It ensures that the user can only operate on the
        current view and is not able to perform any operations on expired
        views, which might lead to unexpected results.</para>

        <para>Let's look at a short example how frameworks like Apache Struts
        or Sun JSF might react. Suppose you were building an email application
        presenting a list of received emails with a delete button beneath each
        list entry. After clicking such a delete button, the application would
        present a confirmation dialog. If you had built your application in a
        way that the delete buttons referred to an index, a browser back click
        and click on another delete button would delete the wrong email! In
        the default configuration wingS avoids this by ignoring the last
        deletion click and it will just redisplay the first confirmation
        dialog.</para>

        <para>Please keep in mind, that you will be most likely using the HTTP
        POST operation to receive any form data from the browser. On pressing
        the back button this will typically display a query window, asking the
        user if he really wants to submit his last data again.</para>
      </sect2>

      <sect2>
        <title>Allow Back Navigation</title>

        <para>Another approach supported by wingS is to allow back navigation
        and support operations on hand-selected components. In this case three
        things must be triggered. <itemizedlist>
            <listitem>
              <para>Firstly, SForm needs to use HTTP GET to avoid the nagging
              confirmation dialog of the browsers on back navigations.</para>

              <para><code>form.setPostMethod(false);</code></para>
            </listitem>

            <listitem>
              <para>Secondly, disable page expiration. Otherwise every back
              navigation leads to a page reload presenting the current view
              again.</para>

              <para><code>form.getParentFrame().setNoCaching(true);</code></para>
            </listitem>

            <listitem>
              <para>Lastly, you have to disable the epoch checking on the
              desired components.</para>

              <para><code>anAlwaysValidComponent.setEpochCheckEnabled(false);</code></para>
            </listitem>
          </itemizedlist> On disabling the epoch check on a component you
        should be aware that consequently this component might receive input
        events at any time from developer's perspective. You must ensure that
        the action triggered will always lead to valid actions in your
        application. If you obey this you will be able to build web
        applications with the full comfort of modern web browsers and the
        comfort of object-oriented design.</para>
      </sect2>

      <sect2>
        <title>Back Navigation Detection</title>

        <para>The last technique implemented in wingS is to determine back
        navigations heuristically. Therefore the root <code>SFrame</code>
        offers a method to declare a virtual back button. But first we'll take
        a quick look behind the scenes.</para>

        <para>As mentioned wingS uses the epoch check feature to detect back
        operations. For this operation mode we do the following: <itemizedlist>
            <listitem>
              <para>Advise the browser to reload every page immediately
              (default).</para>

              <para><code>rootFrame.setNoCaching(false);</code></para>
            </listitem>

            <listitem>
              <para>Register a virtual back button.</para>

              <para><code>rootFrame.setBackButton(virtualBackButton);</code></para>
            </listitem>
          </itemizedlist></para>

        <para>To ensure that this feature will work reliably you should use a
        global <code>SForm</code> element contained in every page. This form
        component will have it's own epoch like all other input elements. As
        we advise the browser to refresh every page on each entry, a browser's
        back navigation will lead to an immediate reload of the last page.
        This last page will also contain the (expired) form component and
        therefore lead to an <code>InvalidLowLevelEvent</code>. Hence, the
        root frame will be notified about this
        <code>InvalidLowLevelEvent</code> and interpret this as a result of a
        back navigation event. After triggering the virtual back button all
        further <code>InvalidLowLevelEvent</code> will be ignored for a short
        period of time to avoid multiple triggers and/or false detected back
        navigations as a result of inadvertent double-clicks on the client
        side.</para>
      </sect2>
    </sect1>

    <sect1>
      <title id="client-side-scripting">Client Side Script Listeners</title>

      <para>wingS applications typically work with server side events. That
      is, whenever you press a button in a wingS application, a form is
      submitted or a link is pressed that calls the server side's registered
      ActionListener. From a user's point of view this creates the brief
      annoying pause between request and response, an effect intrinsic to web
      applications in general. Interestingly though, users have silently
      accepted this shift in UI behaviour from client to web
      applications.</para>

      <para>Is that acceptance by the user an excuse for not trying to improve
      this? No. In fact, there are several fascinating initiatives<footnote>
          <para>Currently the wingS team is integrating the <ulink
          url="http://www.getahead.ltd.uk/dwr/"> DWR</ulink> framework into
          wingS. Have a look at the WingSet demo.</para>
        </footnote> determined to improve the latency of web
      applications.</para>

      <para>Back to wingS. This is how you can integrate JavaScript in a wingS
      application:</para>

      <para><remark>TODO: Explain general concept in wingS.</remark></para>

      <itemizedlist>
        <listitem>
          <para>explain JavaScriptEvents, JavaScriptListener and how they can
          be added to components</para>
        </listitem>

        <listitem>
          <para>explain a simple application with a JavaScript Listener doing
          just a submit().</para>
        </listitem>

        <listitem>
          <para>explain JavaScript listeners, that reference other components
          like in this example from wingset/JavaScriptListenerExample</para>
        </listitem>
      </itemizedlist>

      <programlisting>STextField firstField  = new STextField();
STextField secondField  = new STextField();
STextField sumField  = new STextField();

  /*
   * Add the client side script listener. The variables
   * in curly braces are replaced by the actual IDs of the components.
   */
  private final static String JS_ADD_SCRIPT =
            "document.getElementById('{2}').
              getElementsByTagName('input')[0].value" +
            " = ((1.0 * document.getElementById('{0}').
              getElementsByTagName('input')[0].value)" +
            " + (1.0 * document.getElementById('{1}').
              getElementsByTagName('input')[0].value));";
  SComponent[] jsParams = new SComponent[]{firstField, secondField,
                                           sumField};

  JavaScriptListener jsListener;
  jsListener = new JavaScriptListener(JavaScriptEvent.ON_CHANGE,
                                      JS_ADD_SCRIPT,
                                      jsParams);

  firstField.addScriptListener(jsListener);
  secondField.addScriptListener(jsListener);
  sumField.addScriptListener(jsListener);</programlisting>
    </sect1>

    <sect1>
      <title>Drag &amp; Drop support</title>

      <para>wingS supports Drag &amp; Drop in a very simple but powerful
      manner. A component that implements the DragSource interface is
      transparently made draggable by means of a javascript library on the
      client. A component that implements DropTarget will accept those
      draggables. When a drag and drop gesture has been performed on the
      client, a request is sent to the server and component drop listeners are
      notified. <programlisting>private class SDragLabel extends SLabel implements DragSource {
  private boolean dragEnabled;

  public boolean isDragEnabled() {
    return dragEnabled;
  }

  public void setDragEnabled(boolean dragEnabled) {
    this.dragEnabled = dragEnabled;
    if (dragEnabled) {
      SessionManager.getSession().getDragAndDropManager()
                 .registerDragSource((DragSource)this);
    } else {
      SessionManager.getSession().getDragAndDropManager()
                 .deregisterDragSource((DragSource)this);
    }
  }
}

private class SDropLabel extends SLabel implements DropTarget {
  private ArrayList componentDropListeners = new ArrayList();

  public void addComponentDropListener(SComponentDropListener listener) {
    componentDropListeners.add(listener);
    SessionManager.getSession().getDragAndDropManager()
                 .registerDropTarget(this);
  }

  public List getComponentDropListeners() {
    return componentDropListeners;
  }
}</programlisting> The wingSet demo contains a comlete example exploring the
      drag and drop feature.</para>
    </sect1>

    <sect1>
      <title id="session-recording">Session Recording and Playback</title>

      <sect2>
        <title>Overview</title>

        <para>Session recording allows you to record a sequence of events by
        simply clicking through your web application. The recorded data is
        dumped into a Java source file which - after compilation - can be used
        to replay the recorded events at a selected pace.</para>
      </sect2>

      <sect2>
        <title>Prerequisites</title>

        <para>The code should be generated with the components' names (if
        available) instead of the generated IDs. This makes it easier to
        identify events in the recording: <programlisting>&lt;init-param&gt;
  &lt;param-name&gt;wings.event.usenames&lt;/param-name&gt;
  &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/init-param&gt;
&lt;init-param&gt;
  &lt;param-name&gt;wings.servlet.lookupname&lt;/param-name&gt;
  &lt;param-value&gt;Recording&lt;/param-value&gt;
&lt;/init-param&gt;</programlisting></para>

        <para>If a component has a name (name property of SComponent), the
        component receives events for this name as well (so-called named
        events). Therefore you must set an application-wide unique name for
        every component you want to click or modify. <programlisting>SButton button = new SButton("click");
button.setName("UniqueName1");</programlisting></para>
      </sect2>

      <sect2>
        <title>Generation of the session playback java source file</title>

        <para>For session recording, you can use any available test tool (for
        example JMeter). Alternatively, there is a servlet filter
        (org.wings.recorder.Recorder), that can be used to generate java
        sources for a client, that performs the recorded requests:
        <programlisting>&lt;filter&gt;
  &lt;filter-name&gt;Recorder&lt;/filter-name&gt;
  &lt;filter-class&gt;org.wings.recorder.Recorder&lt;/filter-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;wings.servlet.recorder.file&lt;/param-name&gt;
    &lt;param-value&gt;Recording&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;wings.servlet.lookupname&lt;/param-name&gt;
    &lt;param-value&gt;Recording&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
  &lt;filter-name&gt;Recorder&lt;/filter-name&gt;
  &lt;servlet-name&gt;WingSet&lt;/servlet-name&gt;
&lt;/filter-mapping&gt;</programlisting></para>

        <para>The filter appends a control panel at the end of the generated
        page. The text field sets the name of the recording. It will be used
        as the classname and filename of the generated source. The "start"
        -button starts the recording. The "stop"-button stops the recording
        and the sources will be generated. The java source file will be placed
        in the current directory of the servlet engine / application server
        JVM. Copy it to the wings main directory.</para>
      </sect2>

      <sect2>
        <title>Playback</title>

        <para>The playback tool (replay.sh) compiles the source and runs it in
        single-client mode (regression test / functional test) or with n
        clients in parallel (load test): <programlisting>replay.sh -d 1.0 http://localhost:8080/wingset/WingSet Recording 20</programlisting></para>

        <para>The playback tool supports slow/fast motion, load ramp, i
        iterations, n parallel clients.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Advanced Techniques</title>

      <para>This chapter describes some more rarely techniques you'll propably
      only need in very specific cases.</para>

      <sect2>
        <title>Sharing Resources Among Servlets</title>

        <para>Architectural requirements often suggest a break-up of a web
        application into multiple servlets. Sharing common resources can be
        achieved with the ServletContext interface's methods for handling
        attributes.</para>

        <para>To make a resource (any Java object) available across servlets
        use the setAttribute() method: <programlisting>ServletContext context = SessionManager.getSession().getServletContext();
context.setAttribute("app.resource", new SharedResource());</programlisting></para>

        <para>Within a second servlet use getAttribute() to retrieve a
        reference to the resource: <programlisting>ServletContext context = SessionManager.getSession().getServletContext();
SharedResource resource = context.getAttribute("app.resource");</programlisting></para>

        <para>Attention has to be paid to the attribute's namespace, as it
        might interfere with other servlets. Prefixing the package name is an
        advisable convention.</para>

        <para>The approach presented above particularly makes sense if you
        have decided to use a mixed approach of wingS and other Servlet API
        based components as <code>ServletContext</code> is a Servlet API
        interface.</para>
      </sect2>

      <sect2>
        <title>Internationalization and Character encoding</title>

        <para>In contrast to earlier version of wingS, the character encoding
        used to communicate between the browser and the wingS framework no
        longer defaults to local dependent character encodings, but UTF-8.
        This enables wingS to display and process input containing all
        characters represented in UTF-8.</para>

        <para>Currently all wingS supported browsers are capable of handling
        UTF-8 correctly, so this should be no issue. Please be aware that you
        might need additional fonts installed on your system (i.e. Arial
        Unicode in Microsoft Windows environments) to be able to display e.g.
        chinese characters.</para>

        <para>Nevertheless you have the possibility to override this default
        with your own character encodings depending on the locale configured
        in the client browser. Just provide a properties file called
        <code>org.wings.util.charset.properties</code> inside your
        <code>WEB-INF</code> directory with a map of Locale names to character
        encoding names. Refer to the example file in the WingSet demo or look
        at the <code>charset.properties</code> in the wingS distribution for
        details.</para>

        <para>Please be aware of one open pitfall in wingS: Currently the
        template files for the layout managers are all expected to be in the
        ISO-8859-1 encoding. So you need to escape special characters. This
        issue might have been resolved meanwhile.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>Spring Integration</title>

      <para>The <ulink url="http://www.springframework.org">Spring
      Framework</ulink> is used as a way to wire components together, using
      <ulink url="http://martinfowler.com/articles/injection.html">Inversion
      of Control and the Dependency Injection</ulink> pattern, while providing
      many useful features for enterprise application development.</para>

      <para>It could also be used in wingS to hook service objects, data
      access objects, security, localization and transactional management and
      so on, transparantly, into the UI framework using a simple XML
      configuration file. You can also use it to actually assemble the entire
      user interface part of your application, if you carefully design the UI
      component object model (i.e assemble panels and forms and so forth into
      frames).</para>

      <para>As there is no direct support (yet) for bootstrapping and inject
      components into a wingS application, one has to resort to standard
      servlet session techniques as described here.</para>

      <para>The first thing you have to do is of course to have a Spring
      context, and initialize that in the same webapp context as your wingS
      application.</para>

      <para>Create a default Spring context in
      <filename>web.xml</filename>:</para>

      <para><programlisting>&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</programlisting></para>

      <para>That context is by default configured by a file named
      <filename>applicationContext.xml</filename>:</para>

      <para><programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"&gt;

 &lt;bean id="dataSource"
  class="org.apache.commons.dbcp.BasicDataSource"
  destroy-method="close"&gt;
  ...
 &lt;/bean&gt;

 &lt;bean id="sessionFactory"
  class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"&gt;
  &lt;property name="dataSource" ref="dataSource" /&gt;
  ...
 &lt;/bean&gt;

 &lt;bean id="transactionManager"
   class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt;
   &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
 &lt;/bean&gt;

 ...

 &lt;bean name="categoryDao"
  class="se.curalia.pics.CategoryDao"&gt;
  &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
 &lt;/bean&gt;

 &lt;bean name="pictureDao"
  class="se.curalia.pics.PictureDao"&gt;
  &lt;property name="sessionFactory" ref="sessionFactory" /&gt;
 &lt;/bean&gt;

&lt;/beans&gt;</programlisting>Since neither our <code>WingServlet</code>, nor
      our main wingS class is configured and created by Spring, we need
      support code in our main class to get to these DAOs. True IoC is
      therefore never achieved.</para>

      <para>Lets use this snippet of code in our main class:</para>

      <para><programlisting>public class MainApplication {
 public WebApplicationContext spring;

 public MainApplication() {

   // get the Spring context from one of Springs util classes
   Session session = SessionManager.getSession();
   ServletContext ctx = session.getServletContext();
   spring = WebApplicationContextUtils.getWebApplicationContext(ctx);

   // give the SFrame a reference to our main class
   MainFrame mainFrame = new MainFrame(this);
   mainFrame.setVisible(true);

 }

}</programlisting>Where <code>WebApplicationContext</code> is a Spring class
      repesenting our newly created context. The main class is then passed
      down the hierachy via reference so that our UI components can use the
      following code to fetch Spring configured beans like this:</para>

      <para><programlisting>PictureDao pictureDao = (PictureDao)app.spring.getBean("pictureDao");</programlisting>This
      approach is not very satisfying beacuase of the need to pass around a
      reference to this main class (or the "spring" property). Another idea is
      that the main class fetches the relevant Spring beans and it itself
      "injects" those beans into the SFrame and the other components. This way
      the components are luckily unaware where the services and daos etc, came
      from (again, the idea of IoC and DI). However, this may lead to another
      problem; the main class must know about every bean, component and
      service it has to wire together, something that our Spring configuration
      is best at. One could also argue that it is also a violation of the
      <ulink
      url="http://en.wikipedia.org/wiki/Separation_of_concerns">Separation of
      Concern</ulink> paradigm and leads to problems with beans of different
      scopes (request, session, application etc)</para>

      <para>On the other hand, if we perhaps could let every component
      themselves decide where, and when, they wanted our Spring beans, we
      could provide them with a little utility class like this one:</para>

      <para><programlisting>public class Spring {

 private static Object getBean(String name) {
  Session session = SessionManager.getSession();
  ServletContext ctx = session.getServletContext();

  WebApplicationContext spring = WebApplicationContextUtils.getWebApplicationContext(ctx);

  return spring.getBean(name);
 }

 public static CategoryDao getCategoryDao() {
  return (CategoryDao)getBean("categoryDao");
 }
 
 public static PictureDao getPictureDao() {
  return (PictureDao)getBean("pictureDao");
 }
}</programlisting>That way, every component can use a simple call like in this
      example to fetch a Spring bean:</para>

      <para><programlisting>public class PictureTableModel extends AbstractTableModel {
  PictureDao pictureDao;

  public PictureTableModel() {
    // get our Spring bean
    this.pictureDao = Spring.getPictureDao();
  }

  public int getRowCount() {
    this.pictureDao.count();
  }

  ...

}</programlisting>Again, this leads to potential problems. First, the UI
      component (or <code>the Spring</code> class) must know the name of the
      bean as configured by Spring and it can't easily be changed. Second, it
      is not very IoC/DI. your Spring configuration and application
      development need to be much more integrated than otherwise whould have
      been needed.</para>

      <para>However, regardless of these problems the benefits of using any of
      these methods can be, and is, leveraged the more you get into
      Spring.</para>

      <para>We dont cover the possibilites when combining wingS
      <code>WingServlet</code> with Springs servlet support here, suffice it
      to say that then your wingS application can be bootstrapped and
      configured by Spring and each application can have its own Spring
      context in addition to this shared context.</para>

      <para>Of course, it doesn't solve all of our problems if not every
      component is created by Spring. Thats where <ulink
      url="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</ulink>
      can could help...</para>
    </sect1>
  </chapter>

  <chapter>
    <title id="chapInsidewingS">Behind the scenes - wingS internals</title>

    <para>Developers interested in the architecture of wingS will find this
    chapter useful as it helps understanding the source code.</para>

    <section>
      <title id="session-management">Session Management</title>

      <para>A "session" is a logical conversation between one particular web
      browser and the server. Recall that HTTP involves request-response
      conversations between the web browser and the server. A session can span
      multiple such request-response conversations, and in the wingS case will
      typically be initiated when the wingS application is started. It will be
      terminated when the application explicitly closes the session, the web
      browser is closed or the session times out. Due to the nature of HTTP
      the server cannot tell automatically that a web browser is no longer
      "interested" so it must fall back on using a timeout. For better
      security it is recommended to provide your wingS application with an
      explicit "logoff" command, and encourage your users to use it ! (You can
      do this with a call to session.Session.exit)</para>

      <para>The session is managed by the servlet container, usually by
      associating a cookie with the name "JSESSIONID" with the HTTP requests.
      The particular value of the cookie then identifies to which session the
      request belongs. This mapping is all part of the standard Java servlet
      framework. This in turn delegates handling of each request to
      <code>session.WingServlet</code> - you will set up the mapping between
      your web application name and this class as part of your servlet
      container configuration. (See the servlet tag in web.xml in an example
      application)</para>

      <para>The main servlet class, <code>session.WingServlet</code>, handles
      requests directly for resources that do not change (e.g. static images),
      otherwise it creates a <code>session.SessionServlet</code> instance
      appropriately for each new session and delegates to it. The session's
      <code>session.SessionServlet</code> is thus the main coordinator and
      router of events to your wingS application code. Each instance will be
      associated with an instance of your main application class (which you
      configured using the "init-param" named "wings.mainclass" in your
      servlet container configuration). It also creates a
      <code>session.Session</code> instance which holds some useful instance
      data as well as sharing the implementation burden with
      <code>session.SessionServlet</code>. This instance is also transiently
      associated with the thread which is processing the HTTP request (since
      this will not change for the duration of the request) using
      <code>session.SessionManager</code> so that you can conveniently
      retrieve the session from your own application code using:
      <code>SessionManager.getSession()</code></para>

      <para>The first task for <code>session.SessionServlet</code> is to
      extract any parameters from the HTTP request, since this is how visual
      components will notify of some action like a user pressing a button, and
      to then trigger the appropriate wingS events. This is the stage where
      your application code will receive callbacks for any action listeners
      that you have registered, and in turn drive your whole application's
      logic. This is handled by passing any HTTP request parameters to the
      session's <code>session.LowLevelEventDispatcher</code> instance.</para>

      <para>After delivering all events <code>session.SessionServlet</code>
      needs to deliver the externalised representation of the appropriate
      resource as the HTTP response. If the requested resource indicates that
      it is for the default resource, i.e. the top level frame of your
      application, then it looks for the topmost frame associated with the
      session and "displays" this. Otherwise the request will be for an
      explicit resource, probably this will have been generated automatically
      using the externalisation framework when "displaying" some sub-component
      of the user-interface. It is rare that you need to explicitly know how
      to address user interface components. (This is covered in more detail
      later in this document).</para>

      <para>There is a magic identifier "_" which can be used to force the
      display of the top-level frame. This is very useful for debugging, and
      also for navigation back to the "home page" of your application.</para>

      <para>Top level frames are derived from <code>SFrame</code>. The
      show/hide methods actually add/remove the frame from the collection
      maintained by <code>session.SessionServlet</code>. This is how you can
      switch the "main window" in your application. Hence you can keep
      multiple windows "in the background" by holding the instances in your
      main application class, and switch rapidly between them.</para>

      <para>Your main application instance will be garbage collected when the
      session finishes, and typically you will access any "top level"
      application objects via this instance. I.e. where in a normal
      application you might have global static variables, these would be
      member variables of your main application instance in a wingS
      application. You can of course still use global static variables, if
      that is what you intend, in which case they will have a lifetime that
      encompasses all sessions.</para>

      <para>If you need to integrate some other piece of web technology you
      can use the functionality of the standard Java servlet
      <code>HttpServletRequest</code> and <code>HttpSession</code> classes to
      communicate any common data required by different modules by using named
      session attributes. This keeps the code decoupled. For example:</para>

      <programlisting>public void setSessionFoo(HttpServletRequest request, MyFoo foo)
    throws ServletException {

  HttpSession session = request.getSession();
  session.setAttribute("MySharedFoo", foo);
}

public MyFoo getSessionHelper(HttpServletRequest request)
    throws ServletException {

  HttpSession session = request.getSession();
  Object x = session.getAttribute("MySharedFoo");
  if (x == null)
    throw new ServletException( ... );
  return((MyFoo) x);
}</programlisting>
    </section>

    <section>
      <title>Resources</title>

      <para>Resources provide a bridge between the user interface components
      and the externalisation mechanism. This allows user interface components
      to focus on high level tasks such as responding to events and ignore the
      messy issue of how to render themselves. A resource must be able to do
      two key things, which are explicit in the base class declaration of
      Resource:</para>

      <itemizedlist>
        <listitem>
          <para>Be referred to by a URL, hence implements
          <code>URLResource</code></para>
        </listitem>

        <listitem>
          <para>Render itself onto the HTTP response stream, hence implements
          <code>Renderable</code></para>
        </listitem>
      </itemizedlist>

      <para>URLs can be entirely arbitrary, in which case use a <ulink
      url="http://wingsframework.org/javadoc/org/wings/SimpleURL.html">
      <code>SimpleURL</code></ulink> (e.g. to refer to another web
      application), or they can be relative to your web application context in
      which case use a <code>RequestURL</code> (e.g. for a resource deployed
      under your web application deployment directory). For further options
      see <ulink
      url="http://wingsframework.org/javadoc/org/wings/externalizer/AbstractExternalizeManager.html">
      <code>AbstractExternalizeManager</code></ulink> flags. Resources will
      choose the type which is most suitable for themselves.</para>

      <section>
        <title>Resource Types</title>

        <para>The following resource classes are provided by wingS:
        <itemizedlist>
            <listitem>
              <para><ulink
              url="http://wingsframework.org/javadoc/org/wings/StaticResource.html"><code>StaticResource</code></ulink>
              - base class for components whose representation does not
              change, e.g. images. Much of the implementation can be put into
              this base class so it has methods to write the raw data and
              represent its URL.</para>

              <para><itemizedlist>
                  <listitem>
                    <para><ulink
                    url="http://wingsframework.org/javadoc/org/wings/ClasspathResource.html"><code>ClasspathResource</code></ulink>
                    - a static resource that is loaded by a class loader. This
                    is useful when you want to jar up a bunch of resources
                    (e.g. images) along with your java classes for deployment
                    to the servlet container. You can then refer to them using
                    your class namespace, e.g.
                    "com/acme/myapp/prettypicture.jpeg". You may not need to
                    use this directly (wingS uses it for static stylesheets),
                    but you are very likely to need the derived
                    ResourceImageIcon class which is for static images, and
                    would in fact be required for a JPEG file.</para>
                  </listitem>

                  <listitem>
                    <para><ulink
                    url="http://wingsframework.org/javadoc/org/wings/FileResource.html"><code>FileResource</code></ulink>
                    - a static resource wrapped around a file stream. If the
                    resource is an image then use the derived FileImageIcon,
                    which will try and deduce dimensions.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://wingsframework.org/javadoc/org/wings/StringResource.html"><code>StringResource</code></ulink>
              - use this if you already have the raw representation data of
              some static resource as a string.</para>
            </listitem>

            <listitem>
              <para><ulink
              url="http://wingsframework.org/javadoc/org/wings/DynamicResource.html">
              <code>DynamicResource</code></ulink> - base class for components
              whose representation changes, i.e. most user interface widgets.
              Because of the dynamic nature the URL of these resources is not
              constant, it is forced to a unique value on each subsequent
              request by an "epoch counter". This allows wingS to check that a
              request is for the most current representation of a resource,
              which is also an important security feature. <itemizedlist>
                  <listitem>
                    <para><ulink
                    url="http://wingsframework.org/javadoc/org/wings/DynamicCodeResource.html"><code>DynamicCodeResource</code></ulink>
                    - actually only used for SFrame components. Delegates
                    externalisation to the frame.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Mapping Resources</title>

        <para>As mentioned above resources provide the bridge to
        externalisation and this means that all resources must be able to
        refer to each other, so all resources must be assigned an id that can
        eventually be used in a URL or HTML form, (see Resource.getId).
        However this is not as simple as generating a new random string for
        each new object since the different resources listed above need
        different strategies for how to be referenced. Hence this process is
        managed by different externalizer.ExternalizeManager instances. This
        class (and its base class
        <code>externalizer.AbstractExternalizeManager</code>) maintains the
        mapping between id and resource. This happens on-demand when
        Resource.getId is called, which in turn calls
        externalizer.AbstractExternalizeManager.externalize. Note that at this
        stage no HTML is written, it simply initialises the resource so that
        it can be addressed. Once this is done a
        <code>externalizer.ExternalizedResource</code> instance is used to
        hold various bits of information that will be needed for subsequent
        externalisation, such as MIME type and whether any special HTTP
        headers are needed.</para>

        <para>The final stage of externalisation (called from SessionServlet)
        will call on the appropriate externalizer.ExternalizeManager to write
        an externalised representation of the
        <code>externalizer.ExternalizedResource</code>. This is delegated to
        an externalizer.Externalizer implementation specific to the MIME type
        of the resource (since this is how HTTP identifies different resource
        data types).</para>

        <para>There is also a system-wide manager,
        <code>externalizer.SystemExternalizeManager</code>, which is used for
        resources which are not bound to a session (e.g. static files). The
        <code>session.WingsServlet</code> identifies these requests at an
        early stage since the resource id starts with a minus character
        ("-").</para>
      </section>
    </section>

    <section>
      <title>Delivering Events</title>

      <para>The wingS framework needs to understand user actions in the web
      browser, and then map these to user interface events in the code
      executing in the servlet container. Most of these events are derived
      from standard Java SDK classes such as java.awt.AWTEvent. Recalling the
      limitations of HTTP, these events must be encoded in the HTTP request,
      either in the URL or in posted form data. Hence the first task for
      session.SessionServlet is to extract any parameters from the HTTP
      request, and pass these to the session's
      <code>session.LowLevelEventDispatcher</code> instance. This extracts
      encoded events then passes them on to any LowLevelEventListener
      instances which have registered interest - these will be the actual user
      interface widgets like buttons, lists and tables.</para>

      <para>The dispatcher does some initial decoding of the HTTP request
      parameters, for example, an additional value may be encoded into the
      HTTP request parameter name using a "_" separator. It then passes the
      events on to the listeners using
      <code>LowLevelEventListener.processLowLevelEvent()</code> . The specific
      widget will then turn this "low level" event into something semantically
      meaningful like a button selection. Widget implementors have to go to
      some trouble to ensure that events fire in the correct order so events
      are categorised as <itemizedlist>
          <listitem>
            <para>Low level - the raw events from HTTP request</para>
          </listitem>

          <listitem>
            <para>Intermediate level - representing some kind of widget state
            change "in progress"</para>
          </listitem>

          <listitem>
            <para>High level - what you as a wingS API user are typically
            interested in</para>
          </listitem>
        </itemizedlist></para>

      <para>Conceptually this should be fairly clear, you will see lots of
      logic related to this if you dig around the code, but this is unlikely
      to concern you unless you are implementing your own widgets. The main
      challenge is that an HTTP request will deliver multiple changes all in
      one go, unlike a classical application where all events would be nicely
      serialised. Hence the dispatcher has to try and work out a sensible set
      of events to deliver, and to delay some state changes so that components
      do not end up in an inconsistent state due to the order in which events
      fire.</para>
    </section>

    <section>
      <title>Externalisation and Rendering</title>

      <para>Externalisation is the process of rendering the wingS user
      interface in the HTTP response to the web browser. As explained in the
      section on resources, the first stage is to make resources referenceable
      by assigning an id. The final stage, which this section describes, is to
      write the actual representation on to a stream.</para>

      <para>First the session.SessionServlet must create an output stream. It
      uses a factory instance, <code>io.DeviceFactory</code> to create the
      appropriate <code>io.Device</code> derived stream. You can configure
      your own device factory class using the "wings.device.factory"
      init-param of your wingS application servlet. This is a very useful hook
      for debugging the raw output.</para>

      <para>The session.SessionServlet locates the top-level frame, and then
      calls externalizer.ExternalizeManager.deliver on its
      externalizer.ExternalizedResource. This method sets up various HTTP
      headers appropriately for the kind of resource (e.g. MIME type, caching)
      and then it delegates to <code>externalizer.Externalizer.write()</code>.
      Different derived classes are used depending on resource type. For
      example images must be appropriately encoded in GIF or PNG format,
      whereas static and dynamic resources delegate to the interface
      <code>Renderable</code>. This is probably the simplest interface, but
      can have a very complicated implementation! The majority of objects you
      are likely to be interested in externalise themselves via the
      <code>Renderable</code> interface.</para>

      <section>
        <title>Writing your own renderers</title>

        <para>The rendering task is delegated to separate classes called CGs
        (Code Generators). Different CGs for a single component can handle
        browser specifics in a clean way. If you require special rendering for
        a certain component or if have developed your own custom components,
        you will have to supply renderers for them. For example you could
        implement an accordian style CG for an STree with a model of depth 2.
        A complete set of CGs for all components can be bundled in a PLAF
        (Pluggable Look And Feel). Every CG should derive from
        <code>AbstractComponentCG</code>. The latter will render borders,
        apply the preferred size, provide a tool tip and a component pop up
        menu, make it draggable / a drop target, etc. The concrete CG needs to
        care only about the characteristics of the respective
        component.</para>
      </section>

      <section>
        <title id="css-concepts">Interaction between CSS and PLAFs</title>

        <para>The code generators provide the HTML structure. The CSS makes
        the HTML code look like proper components. For example the TreeCG
        renderes a bunch of nested &lt;li&gt; elements. The vertical lines are
        created by CSS.</para>
      </section>
    </section>
  </chapter>

  <appendix>
    <title>Resources</title>

    <para>The wingS project is hosted by SourceForge at <ulink
    url="http://sourceforge.net/projects/j-wings">
    http://sourceforge.net/projects/j-wings</ulink>. Here you find the latest
    releases, the CVS repository, and our mailing lists.</para>

    <para>Project members on the mailing lists wingS-users and
    wingS-developers provide fast and thorough answers to your
    questions.</para>

    <para>Professional support for wingS can be obtained by <itemizedlist>
        <listitem>
          <para><ulink url="http://www.mercatis.com">mercatis information
          technologies</ulink></para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.exxcellent.de">eXXcellent
          solutions</ulink></para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.wilken.de/">Wilken</ulink></para>
        </listitem>
      </itemizedlist></para>
  </appendix>

  <appendix id="gfdl">
    <appendixinfo>
      <title>GNU Free Documentation License</title>

      <pubdate>Version 1.2, November 2002</pubdate>

      <copyright>
        <year>2000,2001,2002</year>

        <holder>Free Software Foundation, Inc.</holder>
      </copyright>

      <legalnotice id="gfdl-legalnotice">
        <para><address>Free Software Foundation, Inc., <street>51 Franklin
          St, Fifth Floor</street><city>Boston</city>,
          <state>MA</state>,
          <postcode>02110-1301,</postcode><country>USA</country></address>
        Everyone is permitted to copy and distribute verbatim copies of this
        license document, but changing it is not allowed.</para>
      </legalnotice>

      <releaseinfo>Version 1.2, November 2002</releaseinfo>
    </appendixinfo>

    <title>GNU Free Documentation License</title>

    <section id="gfdl-0">
      <title>PREAMBLE</title>

      <para>The purpose of this License is to make a manual, textbook, or
      other functional and useful document "free" in the sense of freedom: to
      assure everyone the effective freedom to copy and redistribute it, with
      or without modifying it, either commercially or noncommercially.
      Secondarily, this License preserves for the author and publisher a way
      to get credit for their work, while not being considered responsible for
      modifications made by others.</para>

      <para>This License is a kind of "copyleft", which means that derivative
      works of the document must themselves be free in the same sense. It
      complements the GNU General Public License, which is a copyleft license
      designed for free software.</para>

      <para>We have designed this License in order to use it for manuals for
      free software, because free software needs free documentation: a free
      program should come with manuals providing the same freedoms that the
      software does. But this License is not limited to software manuals; it
      can be used for any textual work, regardless of subject matter or
      whether it is published as a printed book. We recommend this License
      principally for works whose purpose is instruction or reference.</para>
    </section>

    <section id="gfdl-1">
      <title>APPLICABILITY AND DEFINITIONS</title>

      <para id="gfdl-doc">This License applies to any manual or other work, in
      any medium, that contains a notice placed by the copyright holder saying
      it can be distributed under the terms of this License. Such a notice
      grants a world-wide, royalty-free license, unlimited in duration, to use
      that work under the conditions stated herein. The "Document", below,
      refers to any such manual or work. Any member of the public is a
      licensee, and is addressed as "you". You accept the license if you copy,
      modify or distribute the work in a way requiring permission under
      copyright law.</para>

      <para id="gfdl-mod-ver">A "Modified Version" of the Document means any
      work containing the Document or a portion of it, either copied verbatim,
      or with modifications and/or translated into another language.</para>

      <para id="gfdl-secnd-sect">A "Secondary Section" is a named appendix or
      a front-matter section of the Document that deals exclusively with the
      relationship of the publishers or authors of the Document to the
      Document's overall subject (or to related matters) and contains nothing
      that could fall directly within that overall subject. (Thus, if the
      Document is in part a textbook of mathematics, a Secondary Section may
      not explain any mathematics.) The relationship could be a matter of
      historical connection with the subject or with related matters, or of
      legal, commercial, philosophical, ethical or political position
      regarding them.</para>

      <para id="gfdl-inv-sect">The "Invariant Sections" are certain Secondary
      Sections whose titles are designated, as being those of Invariant
      Sections, in the notice that says that the Document is released under
      this License. If a section does not fit the above definition of
      Secondary then it is not allowed to be designated as Invariant. The
      Document may contain zero Invariant Sections. If the Document does not
      identify any Invariant Sections then there are none.</para>

      <para id="gfdl-cov-text">The "Cover Texts" are certain short passages of
      text that are listed, as Front-Cover Texts or Back-Cover Texts, in the
      notice that says that the Document is released under this License. A
      Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at
      most 25 words.</para>

      <para id="gfdl-transparent">A "Transparent" copy of the Document means a
      machine-readable copy, represented in a format whose specification is
      available to the general public, that is suitable for revising the
      document straightforwardly with generic text editors or (for images
      composed of pixels) generic paint programs or (for drawings) some widely
      available drawing editor, and that is suitable for input to text
      formatters or for automatic translation to a variety of formats suitable
      for input to text formatters. A copy made in an otherwise Transparent
      file format whose markup, or absence of markup, has been arranged to
      thwart or discourage subsequent modification by readers is not
      Transparent. An image format is not Transparent if used for any
      substantial amount of text. A copy that is not "Transparent" is called
      "Opaque".</para>

      <para>Examples of suitable formats for Transparent copies include plain
      ASCII without markup, Texinfo input format, LaTeX input format, SGML or
      XML using a publicly available DTD, and standard-conforming simple HTML,
      PostScript or PDF designed for human modification. Examples of
      transparent image formats include PNG, XCF and JPG. Opaque formats
      include proprietary formats that can be read and edited only by
      proprietary word processors, SGML or XML for which the DTD and/or
      processing tools are not generally available, and the machine-generated
      HTML, PostScript or PDF produced by some word processors for output
      purposes only.</para>

      <para id="gfdl-title-page">The "Title Page" means, for a printed book,
      the title page itself, plus such following pages as are needed to hold,
      legibly, the material this License requires to appear in the title page.
      For works in formats which do not have any title page as such, "Title
      Page" means the text near the most prominent appearance of the work's
      title, preceding the beginning of the body of the text.</para>

      <para id="gfdl-entitled">A section "Entitled XYZ" means a named subunit
      of the Document whose title either is precisely XYZ or contains XYZ in
      parentheses following text that translates XYZ in another language.
      (Here XYZ stands for a specific section name mentioned below, such as
      "Acknowledgements", "Dedications", "Endorsements", or "History".) To
      "Preserve the Title" of such a section when you modify the Document
      means that it remains a section "Entitled XYZ" according to this
      definition.</para>

      <para>The Document may include Warranty Disclaimers next to the notice
      which states that this License applies to the Document. These Warranty
      Disclaimers are considered to be included by reference in this License,
      but only as regards disclaiming warranties: any other implication that
      these Warranty Disclaimers may have is void and has no effect on the
      meaning of this License.</para>
    </section>

    <section id="gfdl-2">
      <title>VERBATIM COPYING</title>

      <para>You may copy and distribute the Document in any medium, either
      commercially or noncommercially, provided that this License, the
      copyright notices, and the license notice saying this License applies to
      the Document are reproduced in all copies, and that you add no other
      conditions whatsoever to those of this License. You may not use
      technical measures to obstruct or control the reading or further copying
      of the copies you make or distribute. However, you may accept
      compensation in exchange for copies. If you distribute a large enough
      number of copies you must also follow the conditions in section
      3.</para>

      <para>You may also lend copies, under the same conditions stated above,
      and you may publicly display copies.</para>
    </section>

    <section id="gfdl-3">
      <title>COPYING IN QUANTITY</title>

      <para>If you publish printed copies (or copies in media that commonly
      have printed covers) of the Document, numbering more than 100, and the
      Document's license notice requires Cover Texts, you must enclose the
      copies in covers that carry, clearly and legibly, all these Cover Texts:
      Front-Cover Texts on the front cover, and Back-Cover Texts on the back
      cover. Both covers must also clearly and legibly identify you as the
      publisher of these copies. The front cover must present the full title
      with all words of the title equally prominent and visible. You may add
      other material on the covers in addition. Copying with changes limited
      to the covers, as long as they preserve the title of the Document and
      satisfy these conditions, can be treated as verbatim copying in other
      respects.</para>

      <para>If the required texts for either cover are too voluminous to fit
      legibly, you should put the first ones listed (as many as fit
      reasonably) on the actual cover, and continue the rest onto adjacent
      pages.</para>

      <para>If you publish or distribute Opaque copies of the Document
      numbering more than 100, you must either include a machine-readable
      Transparent copy along with each Opaque copy, or state in or with each
      Opaque copy a computer-network location from which the general
      network-using public has access to download using public-standard
      network protocols a complete Transparent copy of the Document, free of
      added material. If you use the latter option, you must take reasonably
      prudent steps, when you begin distribution of Opaque copies in quantity,
      to ensure that this Transparent copy will remain thus accessible at the
      stated location until at least one year after the last time you
      distribute an Opaque copy (directly or through your agents or retailers)
      of that edition to the public.</para>

      <para>It is requested, but not required, that you contact the authors of
      the Document well before redistributing any large number of copies, to
      give them a chance to provide you with an updated version of the
      Document.</para>
    </section>

    <section id="gfdl-4">
      <title>MODIFICATIONS</title>

      <para>You may copy and distribute a Modified Version of the Document
      under the conditions of sections 2 and 3 above, provided that you
      release the Modified Version under precisely this License, with the
      Modified Version filling the role of the Document, thus licensing
      distribution and modification of the Modified Version to whoever
      possesses a copy of it. In addition, you must do these things in the
      Modified Version:</para>

      <orderedlist id="gfdl-modif-cond" numeration="upperalpha">
        <title>GNU FDL Modification Conditions</title>

        <listitem>
          <simpara>Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the History
          section of the Document). You may use the same title as a previous
          version if the original publisher of that version gives
          permission.</simpara>
        </listitem>

        <listitem>
          <simpara>List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in the
          Modified Version, together with at least five of the principal
          authors of the Document (all of its principal authors, if it has
          fewer than five), unless they release you from this
          requirement.</simpara>
        </listitem>

        <listitem>
          <simpara>State on the Title page the name of the publisher of the
          Modified Version, as the publisher.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve all the copyright notices of the
          Document.</simpara>
        </listitem>

        <listitem>
          <simpara>Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.</simpara>
        </listitem>

        <listitem>
          <simpara>Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified Version
          under the terms of this License, in the form shown in the <link
          linkend="gfdl-addendum">Addendum</link> below.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's license
          notice.</simpara>
        </listitem>

        <listitem>
          <simpara>Include an unaltered copy of this License.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve the section Entitled "History", Preserve its
          Title, and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the Title
          Page. If there is no section Entitled "History" in the Document,
          create one stating the title, year, authors, and publisher of the
          Document as given on its Title Page, then add an item describing the
          Modified Version as stated in the previous sentence.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve the network location, if any, given in the
          Document for public access to a Transparent copy of the Document,
          and likewise the network locations given in the Document for
          previous versions it was based on. These may be placed in the
          "History" section. You may omit a network location for a work that
          was published at least four years before the Document itself, or if
          the original publisher of the version it refers to gives
          permission.</simpara>
        </listitem>

        <listitem>
          <simpara>For any section Entitled "Acknowledgements" or
          "Dedications", Preserve the Title of the section, and preserve in
          the section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles. Section numbers or the
          equivalent are not considered part of the section titles.</simpara>
        </listitem>

        <listitem>
          <simpara>Delete any section Entitled "Endorsements". Such a section
          may not be included in the Modified Version.</simpara>
        </listitem>

        <listitem>
          <simpara>Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.</simpara>
        </listitem>

        <listitem>
          <simpara>Preserve any Warranty Disclaimers.</simpara>
        </listitem>
      </orderedlist>

      <para>If the Modified Version includes new front-matter sections or
      appendices that qualify as Secondary Sections and contain no material
      copied from the Document, you may at your option designate some or all
      of these sections as invariant. To do this, add their titles to the list
      of Invariant Sections in the Modified Version's license notice. These
      titles must be distinct from any other section titles.</para>

      <para>You may add a section Entitled "Endorsements", provided it
      contains nothing but endorsements of your Modified Version by various
      parties--for example, statements of peer review or that the text has
      been approved by an organization as the authoritative definition of a
      standard.</para>

      <para>You may add a passage of up to five words as a Front-Cover Text,
      and a passage of up to 25 words as a Back-Cover Text, to the end of the
      list of Cover Texts in the Modified Version. Only one passage of
      Front-Cover Text and one of Back-Cover Text may be added by (or through
      arrangements made by) any one entity. If the Document already includes a
      cover text for the same cover, previously added by you or by arrangement
      made by the same entity you are acting on behalf of, you may not add
      another; but you may replace the old one, on explicit permission from
      the previous publisher that added the old one.</para>

      <para>The author(s) and publisher(s) of the Document do not by this
      License give permission to use their names for publicity for or to
      assert or imply endorsement of any Modified Version.</para>
    </section>

    <section id="gfdl-5">
      <title>COMBINING DOCUMENTS</title>

      <para>You may combine the Document with other documents released under
      this License, under the terms defined in <link linkend="gfdl-4">section
      4</link> above for modified versions, provided that you include in the
      combination all of the Invariant Sections of all of the original
      documents, unmodified, and list them all as Invariant Sections of your
      combined work in its license notice, and that you preserve all their
      Warranty Disclaimers.</para>

      <para>The combined work need only contain one copy of this License, and
      multiple identical Invariant Sections may be replaced with a single
      copy. If there are multiple Invariant Sections with the same name but
      different contents, make the title of each such section unique by adding
      at the end of it, in parentheses, the name of the original author or
      publisher of that section if known, or else a unique number. Make the
      same adjustment to the section titles in the list of Invariant Sections
      in the license notice of the combined work.</para>

      <para>In the combination, you must combine any sections Entitled
      "History" in the various original documents, forming one section
      Entitled "History"; likewise combine any sections Entitled
      "Acknowledgements", and any sections Entitled "Dedications". You must
      delete all sections Entitled "Endorsements".</para>
    </section>

    <section id="gfdl-6">
      <title>COLLECTIONS OF DOCUMENTS</title>

      <para>You may make a collection consisting of the Document and other
      documents released under this License, and replace the individual copies
      of this License in the various documents with a single copy that is
      included in the collection, provided that you follow the rules of this
      License for verbatim copying of each of the documents in all other
      respects.</para>

      <para>You may extract a single document from such a collection, and
      distribute it individually under this License, provided you insert a
      copy of this License into the extracted document, and follow this
      License in all other respects regarding verbatim copying of that
      document.</para>
    </section>

    <section id="gfdl-7">
      <title>AGGREGATION WITH INDEPENDENT WORKS</title>

      <para>A compilation of the Document or its derivatives with other
      separate and independent documents or works, in or on a volume of a
      storage or distribution medium, is called an "aggregate" if the
      copyright resulting from the compilation is not used to limit the legal
      rights of the compilation's users beyond what the individual works
      permit. When the Document is included in an aggregate, this License does
      not apply to the other works in the aggregate which are not themselves
      derivative works of the Document.</para>

      <para>If the Cover Text requirement of section 3 is applicable to these
      copies of the Document, then if the Document is less than one half of
      the entire aggregate, the Document's Cover Texts may be placed on covers
      that bracket the Document within the aggregate, or the electronic
      equivalent of covers if the Document is in electronic form. Otherwise
      they must appear on printed covers that bracket the whole
      aggregate.</para>
    </section>

    <section id="gfdl-8">
      <title>TRANSLATION</title>

      <para>Translation is considered a kind of modification, so you may
      distribute translations of the Document under the terms of section 4.
      Replacing Invariant Sections with translations requires special
      permission from their copyright holders, but you may include
      translations of some or all Invariant Sections in addition to the
      original versions of these Invariant Sections. You may include a
      translation of this License, and all the license notices in the
      Document, and any Warranty Disclaimers, provided that you also include
      the original English version of this License and the original versions
      of those notices and disclaimers. In case of a disagreement between the
      translation and the original version of this License or a notice or
      disclaimer, the original version will prevail.</para>

      <para>If a section in the Document is Entitled "Acknowledgements",
      "Dedications", or "History", the requirement (section 4) to Preserve its
      Title (section 1) will typically require changing the actual
      title.</para>
    </section>

    <section id="gfdl-9">
      <title>TERMINATION</title>

      <para>You may not copy, modify, sublicense, or distribute the Document
      except as expressly provided for under this License. Any other attempt
      to copy, modify, sublicense or distribute the Document is void, and will
      automatically terminate your rights under this License. However, parties
      who have received copies, or rights, from you under this License will
      not have their licenses terminated so long as such parties remain in
      full compliance.</para>
    </section>

    <section id="gfdl-10">
      <title>FUTURE REVISIONS OF THIS LICENSE</title>

      <para>The Free Software Foundation may publish new, revised versions of
      the GNU Free Documentation License from time to time. Such new versions
      will be similar in spirit to the present version, but may differ in
      detail to address new problems or concerns. See
      http://www.gnu.org/copyleft/.</para>

      <para>Each version of the License is given a distinguishing version
      number. If the Document specifies that a particular numbered version of
      this License "or any later version" applies to it, you have the option
      of following the terms and conditions either of that specified version
      or of any later version that has been published (not as a draft) by the
      Free Software Foundation. If the Document does not specify a version
      number of this License, you may choose any version ever published (not
      as a draft) by the Free Software Foundation.</para>
    </section>

    <section id="gfdl-addendum">
      <title>ADDENDUM: How to use this License for your documents</title>

      <para>To use this License in a document you have written, include a copy
      of the License in the document and put the following copyright and
      license notices just after the title page:</para>

      <blockquote id="copyright-sample">
        <title>Sample Invariant Sections list</title>

        <para>Copyright (c) YEAR YOUR NAME. Permission is granted to copy,
        distribute and/or modify this document under the terms of the GNU Free
        Documentation License, Version 1.2 or any later version published by
        the Free Software Foundation; with no Invariant Sections, no
        Front-Cover Texts, and no Back-Cover Texts. A copy of the license is
        included in the section entitled "GNU Free Documentation
        License".</para>
      </blockquote>

      <para>If you have Invariant Sections, Front-Cover Texts and Back-Cover
      Texts, replace the "with...Texts." line with this:</para>

      <blockquote id="inv-cover-sample">
        <title>Sample Invariant Sections list</title>

        <para>with the Invariant Sections being LIST THEIR TITLES, with the
        Front-Cover Texts being LIST, and with the Back-Cover Texts being
        LIST.</para>
      </blockquote>

      <para>If you have Invariant Sections without Cover Texts, or some other
      combination of the three, merge those two alternatives to suit the
      situation.</para>

      <para>If your document contains nontrivial examples of program code, we
      recommend releasing these examples in parallel under your choice of free
      software license, such as the GNU General Public License, to permit
      their use in free software.</para>
    </section>
  </appendix>
</book>